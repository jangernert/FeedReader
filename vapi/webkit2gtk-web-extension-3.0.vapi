/* webkit2gtk-web-extension-3.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "WebKit", gir_namespace = "WebKit2WebExtension", gir_version = "3.0", lower_case_cprefix = "webkit_")]
namespace WebKit {
	namespace DOM {
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_attr_get_type ()")]
		[GIR (name = "DOMAttr")]
		public class Attr : WebKit.DOM.Node, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected Attr ();
			public bool get_is_id ();
			public string get_name ();
			public unowned WebKit.DOM.Element get_owner_element ();
			public bool get_specified ();
			public string get_value ();
			public void set_value (string value) throws GLib.Error;
			public bool is_id { get; }
			public string name { owned get; }
			public WebKit.DOM.Element owner_element { get; }
			public bool specified { get; }
			public string value { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_audio_track_get_type ()")]
		[GIR (name = "DOMAudioTrack")]
		public class AudioTrack : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected AudioTrack ();
			public bool get_enabled ();
			public string get_id ();
			public string get_kind ();
			public string get_label ();
			public string get_language ();
			public void set_enabled (bool value);
			public bool enabled { get; set; }
			public string id { owned get; }
			public string kind { owned get; }
			public string label { owned get; }
			public string language { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_audio_track_list_get_type ()")]
		[GIR (name = "DOMAudioTrackList")]
		public class AudioTrackList : WebKit.DOM.Object, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected AudioTrackList ();
			public ulong get_length ();
			public unowned WebKit.DOM.AudioTrack get_track_by_id (string id);
			public unowned WebKit.DOM.AudioTrack item (ulong index);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_bar_info_get_type ()")]
		[GIR (name = "DOMBarInfo")]
		public class BarInfo : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected BarInfo ();
			[Deprecated (since = "2.2")]
			public static bool get_visible (void* self);
			[NoAccessorMethod]
			public bool visible { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_bar_prop_get_type ()")]
		[GIR (name = "DOMBarProp")]
		public class BarProp : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected BarProp ();
			public bool get_visible ();
			public bool visible { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_battery_manager_get_type ()")]
		[GIR (name = "DOMBatteryManager")]
		public class BatteryManager : WebKit.DOM.Object, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected BatteryManager ();
			public bool get_charging ();
			public double get_charging_time ();
			public double get_discharging_time ();
			public double get_level ();
			public bool charging { get; }
			public double charging_time { get; }
			public double discharging_time { get; }
			public double level { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_blob_get_type ()")]
		[GIR (name = "DOMBlob")]
		public class Blob : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Blob ();
			public uint64 get_size ();
			public unowned WebKit.DOM.Blob slice (int64 start, int64 end, string contentType);
			[Deprecated (since = "1.10")]
			public unowned WebKit.DOM.Blob webkit_slice (int64 start, int64 end, string content_type);
			public uint64 size { get; }
			[NoAccessorMethod]
			public string type { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_cdata_section_get_type ()")]
		[GIR (name = "DOMCDATASection")]
		public class CDATASection : WebKit.DOM.Text, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected CDATASection ();
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_css_rule_get_type ()")]
		[GIR (name = "DOMCSSRule")]
		public class CSSRule : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected CSSRule ();
			public string get_css_text ();
			public unowned WebKit.DOM.CSSRule get_parent_rule ();
			public unowned WebKit.DOM.CSSStyleSheet get_parent_style_sheet ();
			public void set_css_text (string value) throws GLib.Error;
			public string css_text { owned get; set; }
			public WebKit.DOM.CSSRule parent_rule { get; }
			public WebKit.DOM.CSSStyleSheet parent_style_sheet { get; }
			[NoAccessorMethod]
			public uint type { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_css_rule_list_get_type ()")]
		[GIR (name = "DOMCSSRuleList")]
		public class CSSRuleList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected CSSRuleList ();
			public ulong get_length ();
			public unowned WebKit.DOM.CSSRule item (ulong index);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_css_style_declaration_get_type ()")]
		[GIR (name = "DOMCSSStyleDeclaration")]
		public class CSSStyleDeclaration : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected CSSStyleDeclaration ();
			public string get_css_text ();
			public ulong get_length ();
			public unowned WebKit.DOM.CSSRule get_parent_rule ();
			[Deprecated (since = "2.2")]
			public unowned WebKit.DOM.CSSValue get_property_css_value (string propertyName);
			public string get_property_priority (string propertyName);
			public string get_property_shorthand (string propertyName);
			public string get_property_value (string propertyName);
			public bool is_property_implicit (string propertyName);
			public string item (ulong index);
			public string remove_property (string propertyName) throws GLib.Error;
			public void set_css_text (string value) throws GLib.Error;
			public void set_property (string propertyName, string value, string priority) throws GLib.Error;
			public string css_text { owned get; set; }
			public ulong length { get; }
			public WebKit.DOM.CSSRule parent_rule { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_css_style_sheet_get_type ()")]
		[GIR (name = "DOMCSSStyleSheet")]
		public class CSSStyleSheet : WebKit.DOM.StyleSheet {
			[CCode (has_construct_function = false)]
			protected CSSStyleSheet ();
			public long add_rule (string selector, string style, ulong index) throws GLib.Error;
			public void delete_rule (ulong index) throws GLib.Error;
			public unowned WebKit.DOM.CSSRuleList get_css_rules ();
			public unowned WebKit.DOM.CSSRule get_owner_rule ();
			public unowned WebKit.DOM.CSSRuleList get_rules ();
			public ulong insert_rule (string rule, ulong index) throws GLib.Error;
			public void remove_rule (ulong index) throws GLib.Error;
			public WebKit.DOM.CSSRuleList css_rules { get; }
			public WebKit.DOM.CSSRule owner_rule { get; }
			public WebKit.DOM.CSSRuleList rules { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_css_value_get_type ()")]
		[GIR (name = "DOMCSSValue")]
		public class CSSValue : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected CSSValue ();
			public string get_css_text ();
			public ushort get_css_value_type ();
			public void set_css_text (string value) throws GLib.Error;
			public string css_text { owned get; set; }
			public uint css_value_type { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_character_data_get_type ()")]
		[GIR (name = "DOMCharacterData")]
		public class CharacterData : WebKit.DOM.Node, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected CharacterData ();
			public void append_data (string data) throws GLib.Error;
			public void delete_data (ulong offset, ulong length) throws GLib.Error;
			public string get_data ();
			public ulong get_length ();
			public void insert_data (ulong offset, string data) throws GLib.Error;
			public void remove () throws GLib.Error;
			public void replace_data (ulong offset, ulong length, string data) throws GLib.Error;
			public void set_data (string value) throws GLib.Error;
			public string substring_data (ulong offset, ulong length) throws GLib.Error;
			public string data { owned get; set; }
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_comment_get_type ()")]
		[GIR (name = "DOMComment")]
		public class Comment : WebKit.DOM.CharacterData, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected Comment ();
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_console_get_type ()")]
		[GIR (name = "DOMConsole")]
		public class Console : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Console ();
			[Deprecated (since = "2.2")]
			public void* get_memory ();
			public void group_end ();
			public void time (string title);
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_dom_application_cache_get_type ()")]
		[GIR (name = "DOMDOMApplicationCache")]
		public class DOMApplicationCache : WebKit.DOM.Object, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected DOMApplicationCache ();
			public void abort ();
			public ushort get_status ();
			public void swap_cache () throws GLib.Error;
			public void update () throws GLib.Error;
			public uint status { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_dom_implementation_get_type ()")]
		[GIR (name = "DOMDOMImplementation")]
		public class DOMImplementation : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected DOMImplementation ();
			public unowned WebKit.DOM.CSSStyleSheet create_css_style_sheet (string title, string media) throws GLib.Error;
			public unowned WebKit.DOM.Document create_document (string? namespaceURI, string qualifiedName, WebKit.DOM.DocumentType? doctype) throws GLib.Error;
			public unowned WebKit.DOM.DocumentType create_document_type (string qualifiedName, string publicId, string systemId) throws GLib.Error;
			public unowned WebKit.DOM.HTMLDocument create_html_document (string title);
			public bool has_feature (string feature, string version);
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_dom_mime_type_get_type ()")]
		[GIR (name = "DOMDOMMimeType")]
		public class DOMMimeType : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected DOMMimeType ();
			public string get_description ();
			public unowned WebKit.DOM.DOMPlugin get_enabled_plugin ();
			public string get_suffixes ();
			public string description { owned get; }
			public WebKit.DOM.DOMPlugin enabled_plugin { get; }
			public string suffixes { owned get; }
			[NoAccessorMethod]
			public string type { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_dom_mime_type_array_get_type ()")]
		[GIR (name = "DOMDOMMimeTypeArray")]
		public class DOMMimeTypeArray : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected DOMMimeTypeArray ();
			public ulong get_length ();
			public unowned WebKit.DOM.DOMMimeType item (ulong index);
			public unowned WebKit.DOM.DOMMimeType named_item (string name);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_dom_named_flow_collection_get_type ()")]
		[GIR (name = "DOMDOMNamedFlowCollection")]
		public class DOMNamedFlowCollection : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected DOMNamedFlowCollection ();
			public ulong get_length ();
			public unowned WebKit.DOM.WebKitNamedFlow item (ulong index);
			public unowned WebKit.DOM.WebKitNamedFlow named_item (string name);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_dom_plugin_get_type ()")]
		[GIR (name = "DOMDOMPlugin")]
		public class DOMPlugin : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected DOMPlugin ();
			public string get_description ();
			public string get_filename ();
			public ulong get_length ();
			public string get_name ();
			public unowned WebKit.DOM.DOMMimeType item (ulong index);
			public unowned WebKit.DOM.DOMMimeType named_item (string name);
			public string description { owned get; }
			public string filename { owned get; }
			public ulong length { get; }
			public string name { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_dom_plugin_array_get_type ()")]
		[GIR (name = "DOMDOMPluginArray")]
		public class DOMPluginArray : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected DOMPluginArray ();
			public ulong get_length ();
			public unowned WebKit.DOM.DOMPlugin item (ulong index);
			public unowned WebKit.DOM.DOMPlugin named_item (string name);
			public void refresh (bool reload);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_dom_security_policy_get_type ()")]
		[GIR (name = "DOMDOMSecurityPolicy")]
		public class DOMSecurityPolicy : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected DOMSecurityPolicy ();
			public bool allows_connection_to (string url);
			public bool allows_font_from (string url);
			public bool allows_form_action (string url);
			public bool allows_frame_from (string url);
			public bool allows_image_from (string url);
			public bool allows_media_from (string url);
			public bool allows_object_from (string url);
			public bool allows_plugin_type (string type);
			public bool allows_script_from (string url);
			public bool allows_style_from (string url);
			public bool get_allows_eval ();
			public bool get_allows_inline_script ();
			public bool get_allows_inline_style ();
			public bool get_is_active ();
			public unowned WebKit.DOM.DOMStringList get_report_ur_is ();
			public bool allows_eval { get; }
			public bool allows_inline_script { get; }
			public bool allows_inline_style { get; }
			public bool is_active { get; }
			public WebKit.DOM.DOMStringList report_ur_is { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_dom_selection_get_type ()")]
		[GIR (name = "DOMDOMSelection")]
		public class DOMSelection : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected DOMSelection ();
			public void add_range (WebKit.DOM.Range range);
			public void collapse (WebKit.DOM.Node node, long index) throws GLib.Error;
			public void collapse_to_end () throws GLib.Error;
			public void collapse_to_start () throws GLib.Error;
			public bool contains_node (WebKit.DOM.Node node, bool allowPartial);
			public void delete_from_document ();
			public void empty ();
			public void extend (WebKit.DOM.Node node, long offset) throws GLib.Error;
			public unowned WebKit.DOM.Node get_anchor_node ();
			public long get_anchor_offset ();
			public unowned WebKit.DOM.Node get_base_node ();
			public long get_base_offset ();
			public unowned WebKit.DOM.Node get_extent_node ();
			public long get_extent_offset ();
			public unowned WebKit.DOM.Node get_focus_node ();
			public long get_focus_offset ();
			public bool get_is_collapsed ();
			public unowned WebKit.DOM.Range get_range_at (long index) throws GLib.Error;
			public long get_range_count ();
			public void modify (string alter, string direction, string granularity);
			public void remove_all_ranges ();
			public void select_all_children (WebKit.DOM.Node node) throws GLib.Error;
			public void set_base_and_extent (WebKit.DOM.Node baseNode, long baseOffset, WebKit.DOM.Node extentNode, long extentOffset) throws GLib.Error;
			public void set_position (WebKit.DOM.Node node, long offset) throws GLib.Error;
			public WebKit.DOM.Node anchor_node { get; }
			public long anchor_offset { get; }
			public WebKit.DOM.Node base_node { get; }
			public long base_offset { get; }
			public WebKit.DOM.Node extent_node { get; }
			public long extent_offset { get; }
			public WebKit.DOM.Node focus_node { get; }
			public long focus_offset { get; }
			public bool is_collapsed { get; }
			public long range_count { get; }
			[NoAccessorMethod]
			public string type { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_dom_settable_token_list_get_type ()")]
		[GIR (name = "DOMDOMSettableTokenList")]
		public class DOMSettableTokenList : WebKit.DOM.DOMTokenList {
			[CCode (has_construct_function = false)]
			protected DOMSettableTokenList ();
			public string get_value ();
			public void set_value (string value);
			public string value { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_dom_string_list_get_type ()")]
		[GIR (name = "DOMDOMStringList")]
		public class DOMStringList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected DOMStringList ();
			public bool contains (string string);
			public ulong get_length ();
			public string item (ulong index);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_dom_string_map_get_type ()")]
		[GIR (name = "DOMDOMStringMap")]
		public class DOMStringMap : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected DOMStringMap ();
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_dom_token_list_get_type ()")]
		[GIR (name = "DOMDOMTokenList")]
		public class DOMTokenList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected DOMTokenList ();
			public void add (string tokens) throws GLib.Error;
			public bool contains (string token) throws GLib.Error;
			public ulong get_length ();
			public string item (ulong index);
			public void remove (string tokens) throws GLib.Error;
			public bool toggle (string token, bool force) throws GLib.Error;
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_dom_window_get_type ()")]
		[GIR (name = "DOMDOMWindow")]
		public class DOMWindow : WebKit.DOM.Object, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected DOMWindow ();
			public void alert (string message);
			public string atob (string string) throws GLib.Error;
			public void blur ();
			public string btoa (string string) throws GLib.Error;
			public void cancel_animation_frame (long id);
			public void capture_events ();
			public void clear_interval (long handle);
			public void clear_timeout (long handle);
			public void close ();
			public bool confirm (string message);
			public bool find (string string, bool caseSensitive, bool backwards, bool wrap, bool wholeWord, bool searchInFrames, bool showDialog);
			public void focus ();
			public unowned WebKit.DOM.DOMApplicationCache get_application_cache ();
			public unowned WebKit.DOM.Navigator get_client_information ();
			public bool get_closed ();
			public unowned WebKit.DOM.CSSStyleDeclaration get_computed_style (WebKit.DOM.Element element, string? pseudoElement);
			public unowned WebKit.DOM.Console get_console ();
			public unowned WebKit.DOM.DOMWindowCSS get_css ();
			public string get_default_status ();
			public double get_device_pixel_ratio ();
			public unowned WebKit.DOM.Document get_document ();
			public unowned WebKit.DOM.Element get_frame_element ();
			public unowned WebKit.DOM.DOMWindow get_frames ();
			public unowned WebKit.DOM.History get_history ();
			public long get_inner_height ();
			public long get_inner_width ();
			public ulong get_length ();
			public unowned WebKit.DOM.Storage get_local_storage () throws GLib.Error;
			public unowned WebKit.DOM.BarProp get_locationbar ();
			public unowned WebKit.DOM.BarProp get_menubar ();
			public string get_name ();
			public unowned WebKit.DOM.Navigator get_navigator ();
			public bool get_offscreen_buffering ();
			public unowned WebKit.DOM.DOMWindow get_opener ();
			public long get_outer_height ();
			public long get_outer_width ();
			public long get_page_x_offset ();
			public long get_page_y_offset ();
			public unowned WebKit.DOM.DOMWindow get_parent ();
			public unowned WebKit.DOM.Performance get_performance ();
			public unowned WebKit.DOM.BarProp get_personalbar ();
			public unowned WebKit.DOM.Screen get_screen ();
			public long get_screen_left ();
			public long get_screen_top ();
			public long get_screen_x ();
			public long get_screen_y ();
			public long get_scroll_x ();
			public long get_scroll_y ();
			public unowned WebKit.DOM.BarProp get_scrollbars ();
			public unowned WebKit.DOM.DOMSelection get_selection ();
			public unowned WebKit.DOM.DOMWindow get_self ();
			public unowned WebKit.DOM.Storage get_session_storage () throws GLib.Error;
			public string get_status ();
			public unowned WebKit.DOM.BarProp get_statusbar ();
			public unowned WebKit.DOM.StyleMedia get_style_media ();
			public unowned WebKit.DOM.BarProp get_toolbar ();
			public unowned WebKit.DOM.DOMWindow get_top ();
			public unowned WebKit.DOM.StorageInfo get_webkit_storage_info ();
			public unowned WebKit.DOM.DOMWindow get_window ();
			public unowned WebKit.DOM.MediaQueryList match_media (string query);
			public void move_by (float x, float y);
			public void move_to (float x, float y);
			public void print ();
			public string prompt (string message, string defaultValue);
			public void release_events ();
			public void resize_by (float x, float y);
			public void resize_to (float width, float height);
			public void scroll (long x, long y);
			public void scroll_by (long x, long y);
			public void scroll_to (long x, long y);
			public void set_default_status (string value);
			public void set_name (string value);
			public void set_status (string value);
			public void stop ();
			public void webkit_cancel_animation_frame (long id);
			public void webkit_cancel_request_animation_frame (long id);
			public unowned WebKit.DOM.WebKitPoint webkit_convert_point_from_node_to_page (WebKit.DOM.Node node, WebKit.DOM.WebKitPoint p);
			public unowned WebKit.DOM.WebKitPoint webkit_convert_point_from_page_to_node (WebKit.DOM.Node node, WebKit.DOM.WebKitPoint p);
			public WebKit.DOM.DOMApplicationCache application_cache { get; }
			public WebKit.DOM.Navigator client_information { get; }
			public bool closed { get; }
			public WebKit.DOM.Console console { get; }
			public WebKit.DOM.DOMWindowCSS css { get; }
			public string default_status { owned get; set; }
			public double device_pixel_ratio { get; }
			public WebKit.DOM.Document document { get; }
			public WebKit.DOM.Element frame_element { get; }
			public WebKit.DOM.DOMWindow frames { get; }
			public WebKit.DOM.History history { get; }
			public long inner_height { get; }
			public long inner_width { get; }
			public ulong length { get; }
			public WebKit.DOM.Storage local_storage { get; }
			public WebKit.DOM.BarProp locationbar { get; }
			public WebKit.DOM.BarProp menubar { get; }
			public string name { owned get; set; }
			public WebKit.DOM.Navigator navigator { get; }
			public bool offscreen_buffering { get; }
			public WebKit.DOM.DOMWindow opener { get; }
			public long outer_height { get; }
			public long outer_width { get; }
			public long page_x_offset { get; }
			public long page_y_offset { get; }
			public WebKit.DOM.DOMWindow parent { get; }
			public WebKit.DOM.Performance performance { get; }
			public WebKit.DOM.BarProp personalbar { get; }
			public WebKit.DOM.Screen screen { get; }
			public long screen_left { get; }
			public long screen_top { get; }
			public long screen_x { get; }
			public long screen_y { get; }
			public long scroll_x { get; }
			public long scroll_y { get; }
			public WebKit.DOM.BarProp scrollbars { get; }
			public WebKit.DOM.DOMWindow self { get; }
			public WebKit.DOM.Storage session_storage { get; }
			public string status { owned get; set; }
			public WebKit.DOM.BarProp statusbar { get; }
			public WebKit.DOM.StyleMedia style_media { get; }
			public WebKit.DOM.BarProp toolbar { get; }
			public WebKit.DOM.DOMWindow top { get; }
			public WebKit.DOM.StorageInfo webkit_storage_info { get; }
			public WebKit.DOM.DOMWindow window { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_dom_window_css_get_type ()")]
		[GIR (name = "DOMDOMWindowCSS")]
		public class DOMWindowCSS : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected DOMWindowCSS ();
			public bool supports (string property, string value);
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_database_get_type ()")]
		[GIR (name = "DOMDatabase")]
		public class Database : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Database ();
			public string get_version ();
			public string version { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_document_get_type ()")]
		[GIR (name = "DOMDocument")]
		public class Document : WebKit.DOM.Node, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected Document ();
			public unowned WebKit.DOM.Node adopt_node (WebKit.DOM.Node source) throws GLib.Error;
			public unowned WebKit.DOM.Range caret_range_from_point (long x, long y);
			public unowned WebKit.DOM.Attr create_attribute (string name) throws GLib.Error;
			public unowned WebKit.DOM.Attr create_attribute_ns (string? namespaceURI, string qualifiedName) throws GLib.Error;
			public unowned WebKit.DOM.CDATASection create_cdata_section (string data) throws GLib.Error;
			public unowned WebKit.DOM.Comment create_comment (string data);
			public unowned WebKit.DOM.CSSStyleDeclaration create_css_style_declaration ();
			public unowned WebKit.DOM.DocumentFragment create_document_fragment ();
			public unowned WebKit.DOM.Element create_element (string tagName) throws GLib.Error;
			public unowned WebKit.DOM.Element create_element_ns (string? namespaceURI, string qualifiedName) throws GLib.Error;
			public unowned WebKit.DOM.EntityReference create_entity_reference (string? name) throws GLib.Error;
			public unowned WebKit.DOM.Event create_event (string eventType) throws GLib.Error;
			public unowned WebKit.DOM.XPathExpression create_expression (string expression, WebKit.DOM.XPathNSResolver resolver) throws GLib.Error;
			public unowned WebKit.DOM.NodeIterator create_node_iterator (WebKit.DOM.Node root, ulong whatToShow, WebKit.DOM.NodeFilter filter, bool expandEntityReferences) throws GLib.Error;
			public unowned WebKit.DOM.XPathNSResolver create_ns_resolver (WebKit.DOM.Node nodeResolver);
			public unowned WebKit.DOM.ProcessingInstruction create_processing_instruction (string target, string data) throws GLib.Error;
			public unowned WebKit.DOM.Range create_range ();
			public unowned WebKit.DOM.Text create_text_node (string data);
			public unowned WebKit.DOM.Touch create_touch (WebKit.DOM.DOMWindow window, WebKit.DOM.EventTarget target, long identifier, long pageX, long pageY, long screenX, long screenY, long webkitRadiusX, long webkitRadiusY, float webkitRotationAngle, float webkitForce) throws GLib.Error;
			public unowned WebKit.DOM.TreeWalker create_tree_walker (WebKit.DOM.Node root, ulong whatToShow, WebKit.DOM.NodeFilter filter, bool expandEntityReferences) throws GLib.Error;
			public unowned WebKit.DOM.Element element_from_point (long x, long y);
			public unowned WebKit.DOM.XPathResult evaluate (string expression, WebKit.DOM.Node contextNode, WebKit.DOM.XPathNSResolver? resolver, ushort type, WebKit.DOM.XPathResult? inResult) throws GLib.Error;
			public bool exec_command (string command, bool userInterface, string value);
			public unowned WebKit.DOM.HTMLCollection get_anchors ();
			public unowned WebKit.DOM.HTMLCollection get_applets ();
			public unowned WebKit.DOM.HTMLElement get_body ();
			public string get_character_set ();
			public string get_charset ();
			public string get_compat_mode ();
			public string get_cookie () throws GLib.Error;
			public unowned WebKit.DOM.HTMLScriptElement get_current_script ();
			public string get_default_charset ();
			public unowned WebKit.DOM.DOMWindow get_default_view ();
			public unowned WebKit.DOM.DocumentType get_doctype ();
			public unowned WebKit.DOM.Element get_document_element ();
			public string get_document_uri ();
			public string get_domain ();
			public unowned WebKit.DOM.Element get_element_by_id (string elementId);
			public unowned WebKit.DOM.NodeList get_elements_by_class_name (string tagname);
			public unowned WebKit.DOM.NodeList get_elements_by_name (string elementName);
			public unowned WebKit.DOM.NodeList get_elements_by_tag_name (string tagname);
			public unowned WebKit.DOM.NodeList get_elements_by_tag_name_ns (string namespaceURI, string localName);
			public unowned WebKit.DOM.HTMLCollection get_forms ();
			public unowned WebKit.DOM.HTMLHeadElement get_head ();
			public bool get_hidden ();
			public unowned WebKit.DOM.HTMLCollection get_images ();
			public unowned WebKit.DOM.DOMImplementation get_implementation ();
			public string get_input_encoding ();
			public string get_last_modified ();
			public unowned WebKit.DOM.HTMLCollection get_links ();
			public unowned WebKit.DOM.CSSStyleDeclaration get_override_style (WebKit.DOM.Element element, string? pseudoElement);
			public string get_preferred_stylesheet_set ();
			public string get_ready_state ();
			public string get_referrer ();
			public unowned WebKit.DOM.DOMSecurityPolicy get_security_policy ();
			public string get_selected_stylesheet_set ();
			public unowned WebKit.DOM.StyleSheetList get_style_sheets ();
			public string get_title ();
			public string get_url ();
			public string get_visibility_state ();
			public unowned WebKit.DOM.Element get_webkit_current_full_screen_element ();
			public bool get_webkit_full_screen_keyboard_input_allowed ();
			public unowned WebKit.DOM.Element get_webkit_fullscreen_element ();
			public bool get_webkit_fullscreen_enabled ();
			[Deprecated (since = "2.2")]
			public bool get_webkit_hidden ();
			public bool get_webkit_is_full_screen ();
			public unowned WebKit.DOM.Element get_webkit_pointer_lock_element ();
			[Deprecated (since = "2.2")]
			public string get_webkit_visibility_state ();
			public string get_xml_encoding ();
			public bool get_xml_standalone ();
			public string get_xml_version ();
			public unowned WebKit.DOM.Node import_node (WebKit.DOM.Node importedNode, bool deep) throws GLib.Error;
			public bool query_command_enabled (string command);
			public bool query_command_indeterm (string command);
			public bool query_command_state (string command);
			public bool query_command_supported (string command);
			public string query_command_value (string command);
			public unowned WebKit.DOM.Element query_selector (string selectors) throws GLib.Error;
			public unowned WebKit.DOM.NodeList query_selector_all (string selectors) throws GLib.Error;
			public void set_body (WebKit.DOM.HTMLElement value) throws GLib.Error;
			public void set_charset (string value);
			public void set_cookie (string value) throws GLib.Error;
			public void set_document_uri (string value);
			public void set_selected_stylesheet_set (string value);
			public void set_title (string value);
			public void set_xml_standalone (bool value) throws GLib.Error;
			public void set_xml_version (string value) throws GLib.Error;
			public void webkit_cancel_full_screen ();
			public void webkit_exit_fullscreen ();
			public void webkit_exit_pointer_lock ();
			public unowned WebKit.DOM.DOMNamedFlowCollection webkit_get_named_flows ();
			public WebKit.DOM.HTMLCollection anchors { get; }
			public WebKit.DOM.HTMLCollection applets { get; }
			public WebKit.DOM.HTMLElement body { get; }
			public string character_set { owned get; }
			public string charset { owned get; set; }
			public string compat_mode { owned get; }
			public string cookie { owned get; set; }
			public WebKit.DOM.HTMLScriptElement current_script { get; }
			public string default_charset { owned get; }
			public WebKit.DOM.DOMWindow default_view { get; }
			public WebKit.DOM.DocumentType doctype { get; }
			public WebKit.DOM.Element document_element { get; }
			public string document_uri { owned get; set; }
			public string domain { owned get; }
			public WebKit.DOM.HTMLCollection forms { get; }
			public WebKit.DOM.HTMLHeadElement head { get; }
			public bool hidden { get; }
			public WebKit.DOM.HTMLCollection images { get; }
			public WebKit.DOM.DOMImplementation implementation { get; }
			public string input_encoding { owned get; }
			public string last_modified { owned get; }
			public WebKit.DOM.HTMLCollection links { get; }
			public string preferred_stylesheet_set { owned get; }
			public string ready_state { owned get; }
			public string referrer { owned get; }
			public WebKit.DOM.DOMSecurityPolicy security_policy { get; }
			public string selected_stylesheet_set { owned get; set; }
			public WebKit.DOM.StyleSheetList style_sheets { get; }
			public string title { owned get; set; }
			public string url { owned get; }
			public string visibility_state { owned get; }
			public WebKit.DOM.Element webkit_current_full_screen_element { get; }
			public bool webkit_full_screen_keyboard_input_allowed { get; }
			public WebKit.DOM.Element webkit_fullscreen_element { get; }
			public bool webkit_fullscreen_enabled { get; }
			public bool webkit_is_full_screen { get; }
			public WebKit.DOM.Element webkit_pointer_lock_element { get; }
			public string xml_encoding { owned get; }
			public bool xml_standalone { get; set; }
			public string xml_version { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_document_fragment_get_type ()")]
		[GIR (name = "DOMDocumentFragment")]
		public class DocumentFragment : WebKit.DOM.Node, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected DocumentFragment ();
			public unowned WebKit.DOM.Element query_selector (string selectors) throws GLib.Error;
			public unowned WebKit.DOM.NodeList query_selector_all (string selectors) throws GLib.Error;
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_document_type_get_type ()")]
		[GIR (name = "DOMDocumentType")]
		public class DocumentType : WebKit.DOM.Node, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected DocumentType ();
			public unowned WebKit.DOM.NamedNodeMap get_entities ();
			public string get_internal_subset ();
			public string get_name ();
			public unowned WebKit.DOM.NamedNodeMap get_notations ();
			public string get_public_id ();
			public string get_system_id ();
			public void remove () throws GLib.Error;
			public WebKit.DOM.NamedNodeMap entities { get; }
			public string internal_subset { owned get; }
			public string name { owned get; }
			public WebKit.DOM.NamedNodeMap notations { get; }
			public string public_id { owned get; }
			public string system_id { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_element_get_type ()")]
		[GIR (name = "DOMElement")]
		public class Element : WebKit.DOM.Node, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected Element ();
			public void blur ();
			public void focus ();
			public string get_attribute (string name);
			public unowned WebKit.DOM.Attr get_attribute_node (string name);
			public unowned WebKit.DOM.Attr get_attribute_node_ns (string namespaceURI, string localName);
			public string get_attribute_ns (string namespaceURI, string localName);
			public unowned WebKit.DOM.NamedNodeMap get_attributes ();
			public ulong get_child_element_count ();
			public unowned WebKit.DOM.DOMTokenList get_class_list ();
			public string get_class_name ();
			public long get_client_height ();
			public long get_client_left ();
			public long get_client_top ();
			public long get_client_width ();
			public unowned WebKit.DOM.NodeList get_elements_by_class_name (string name);
			public unowned WebKit.DOM.NodeList get_elements_by_tag_name (string name);
			public unowned WebKit.DOM.NodeList get_elements_by_tag_name_ns (string namespaceURI, string localName);
			public unowned WebKit.DOM.Element get_first_element_child ();
			public string get_id ();
			public unowned WebKit.DOM.Element get_last_element_child ();
			public unowned WebKit.DOM.Element get_next_element_sibling ();
			public long get_offset_height ();
			public long get_offset_left ();
			public unowned WebKit.DOM.Element get_offset_parent ();
			public long get_offset_top ();
			public long get_offset_width ();
			public unowned WebKit.DOM.Element get_previous_element_sibling ();
			public long get_scroll_height ();
			public long get_scroll_left ();
			public long get_scroll_top ();
			public long get_scroll_width ();
			public unowned WebKit.DOM.CSSStyleDeclaration get_style ();
			public string get_tag_name ();
			[Deprecated (since = "1.10")]
			public string get_webkit_region_overflow ();
			public string get_webkit_region_overset ();
			public bool has_attribute (string name);
			public bool has_attribute_ns (string namespaceURI, string localName);
			public bool has_attributes ();
			public unowned WebKit.DOM.Element query_selector (string selectors) throws GLib.Error;
			public unowned WebKit.DOM.NodeList query_selector_all (string selectors) throws GLib.Error;
			public void remove () throws GLib.Error;
			public void remove_attribute (string name);
			public unowned WebKit.DOM.Attr remove_attribute_node (WebKit.DOM.Attr oldAttr) throws GLib.Error;
			public void remove_attribute_ns (string namespaceURI, string localName);
			public void scroll_by_lines (long lines);
			public void scroll_by_pages (long pages);
			public void scroll_into_view (bool alignWithTop);
			public void scroll_into_view_if_needed (bool centerIfNeeded);
			public void set_attribute (string name, string value) throws GLib.Error;
			public unowned WebKit.DOM.Attr set_attribute_node (WebKit.DOM.Attr newAttr) throws GLib.Error;
			public unowned WebKit.DOM.Attr set_attribute_node_ns (WebKit.DOM.Attr newAttr) throws GLib.Error;
			public void set_attribute_ns (string? namespaceURI, string qualifiedName, string value) throws GLib.Error;
			public void set_class_name (string value);
			public void set_id (string value);
			public void set_scroll_left (long value);
			public void set_scroll_top (long value);
			public bool webkit_matches_selector (string selectors) throws GLib.Error;
			public void webkit_request_full_screen (ushort flags);
			public void webkit_request_fullscreen ();
			public void webkit_request_pointer_lock ();
			public WebKit.DOM.NamedNodeMap attributes { get; }
			public ulong child_element_count { get; }
			public WebKit.DOM.DOMTokenList class_list { get; }
			public string class_name { owned get; set; }
			public long client_height { get; }
			public long client_left { get; }
			public long client_top { get; }
			public long client_width { get; }
			public WebKit.DOM.Element first_element_child { get; }
			public string id { owned get; set; }
			public WebKit.DOM.Element last_element_child { get; }
			public WebKit.DOM.Element next_element_sibling { get; }
			public long offset_height { get; }
			public long offset_left { get; }
			public WebKit.DOM.Element offset_parent { get; }
			public long offset_top { get; }
			public long offset_width { get; }
			public WebKit.DOM.Element previous_element_sibling { get; }
			public long scroll_height { get; }
			public long scroll_left { get; set; }
			public long scroll_top { get; set; }
			public long scroll_width { get; }
			public WebKit.DOM.CSSStyleDeclaration style { get; }
			public string tag_name { owned get; }
			public string webkit_region_overset { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_entity_reference_get_type ()")]
		[GIR (name = "DOMEntityReference")]
		public class EntityReference : WebKit.DOM.Node, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected EntityReference ();
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_event_get_type ()")]
		[GIR (name = "DOMEvent")]
		public class Event : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Event ();
			public bool get_bubbles ();
			public bool get_cancel_bubble ();
			public bool get_cancelable ();
			public unowned WebKit.DOM.EventTarget get_current_target ();
			public bool get_default_prevented ();
			public ushort get_event_phase ();
			public bool get_return_value ();
			public unowned WebKit.DOM.EventTarget get_src_element ();
			public unowned WebKit.DOM.EventTarget get_target ();
			public uint32 get_time_stamp ();
			public void init_event (string eventTypeArg, bool canBubbleArg, bool cancelableArg);
			public void prevent_default ();
			public void set_cancel_bubble (bool value);
			public void set_return_value (bool value);
			public void stop_immediate_propagation ();
			public void stop_propagation ();
			public bool bubbles { get; }
			public bool cancel_bubble { get; set; }
			public bool cancelable { get; }
			public WebKit.DOM.EventTarget current_target { get; }
			public bool default_prevented { get; }
			public uint event_phase { get; }
			public bool return_value { get; set; }
			public WebKit.DOM.EventTarget src_element { get; }
			public WebKit.DOM.EventTarget target { get; }
			public uint time_stamp { get; }
			[NoAccessorMethod]
			public string type { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h")]
		[Compact]
		[GIR (name = "DOMEventTargetClass")]
		public class EventTargetClass {
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_file_get_type ()")]
		[GIR (name = "DOMFile")]
		public class File : WebKit.DOM.Blob {
			[CCode (has_construct_function = false)]
			protected File ();
			public string get_name ();
			public string get_webkit_relative_path ();
			public string name { owned get; }
			public string webkit_relative_path { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_file_list_get_type ()")]
		[GIR (name = "DOMFileList")]
		public class FileList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected FileList ();
			public ulong get_length ();
			public unowned WebKit.DOM.File item (ulong index);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_gamepad_get_type ()")]
		[GIR (name = "DOMGamepad")]
		public class Gamepad : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Gamepad ();
			public string get_id ();
			public ulong get_index ();
			public uint64 get_timestamp ();
			public string id { owned get; }
			public ulong index { get; }
			public uint64 timestamp { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_gamepad_list_get_type ()")]
		[GIR (name = "DOMGamepadList")]
		public class GamepadList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected GamepadList ();
			public ulong get_length ();
			public unowned WebKit.DOM.Gamepad item (ulong index);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_geolocation_get_type ()")]
		[GIR (name = "DOMGeolocation")]
		public class Geolocation : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Geolocation ();
			public void clear_watch (long watchID);
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_anchor_element_get_type ()")]
		[GIR (name = "DOMHTMLAnchorElement")]
		public class HTMLAnchorElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLAnchorElement ();
			public string get_charset ();
			public string get_coords ();
			public string get_download ();
			public string get_hash ();
			public string get_host ();
			public string get_hostname ();
			public string get_href ();
			public string get_hreflang ();
			public string get_name ();
			public string get_origin ();
			public string get_pathname ();
			public string get_ping ();
			public string get_port ();
			public string get_protocol ();
			public string get_rel ();
			public string get_rev ();
			public string get_search ();
			public string get_shape ();
			public string get_target ();
			public string get_text ();
			public void set_charset (string value);
			public void set_coords (string value);
			public void set_download (string value);
			public void set_hash (string value);
			public void set_host (string value);
			public void set_hostname (string value);
			public void set_href (string value);
			public void set_hreflang (string value);
			public void set_name (string value);
			public void set_pathname (string value);
			public void set_ping (string value);
			public void set_port (string value);
			public void set_protocol (string value);
			public void set_rel (string value);
			public void set_rev (string value);
			public void set_search (string value);
			public void set_shape (string value);
			public void set_target (string value);
			public string charset { owned get; set; }
			public string coords { owned get; set; }
			public string download { owned get; set; }
			public string hash { owned get; set; }
			public string host { owned get; set; }
			public string hostname { owned get; set; }
			public string href { owned get; set; }
			public string hreflang { owned get; set; }
			public string name { owned get; set; }
			public string origin { owned get; }
			public string pathname { owned get; set; }
			public string ping { owned get; set; }
			public string port { owned get; set; }
			public string protocol { owned get; set; }
			public string rel { owned get; set; }
			public string rev { owned get; set; }
			public string search { owned get; set; }
			public string shape { owned get; set; }
			public string target { owned get; set; }
			public string text { owned get; }
			[NoAccessorMethod]
			public string type { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_applet_element_get_type ()")]
		[GIR (name = "DOMHTMLAppletElement")]
		public class HTMLAppletElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLAppletElement ();
			public string get_align ();
			public string get_alt ();
			public string get_archive ();
			public string get_code ();
			public string get_code_base ();
			public string get_height ();
			public long get_hspace ();
			public string get_name ();
			public string get_object ();
			public long get_vspace ();
			public string get_width ();
			public void set_align (string value);
			public void set_alt (string value);
			public void set_archive (string value);
			public void set_code (string value);
			public void set_code_base (string value);
			public void set_height (string value);
			public void set_hspace (long value);
			public void set_name (string value);
			public void set_object (string value);
			public void set_vspace (long value);
			public void set_width (string value);
			public string align { owned get; set; }
			public string alt { owned get; set; }
			public string archive { owned get; set; }
			public string code { owned get; set; }
			public string code_base { owned get; set; }
			public string height { owned get; set; }
			public long hspace { get; set; }
			public string name { owned get; set; }
			public string object { owned get; set; }
			public long vspace { get; set; }
			public string width { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_area_element_get_type ()")]
		[GIR (name = "DOMHTMLAreaElement")]
		public class HTMLAreaElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLAreaElement ();
			public string get_alt ();
			public string get_coords ();
			public string get_hash ();
			public string get_host ();
			public string get_hostname ();
			public string get_href ();
			public bool get_no_href ();
			public string get_pathname ();
			public string get_ping ();
			public string get_port ();
			public string get_protocol ();
			public string get_search ();
			public string get_shape ();
			public string get_target ();
			public void set_alt (string value);
			public void set_coords (string value);
			public void set_href (string value);
			public void set_no_href (bool value);
			public void set_ping (string value);
			public void set_shape (string value);
			public void set_target (string value);
			public string alt { owned get; set; }
			public string coords { owned get; set; }
			public string hash { owned get; }
			public string host { owned get; }
			public string hostname { owned get; }
			public string href { owned get; set; }
			public bool no_href { get; set; }
			public string pathname { owned get; }
			public string ping { owned get; set; }
			public string port { owned get; }
			public string protocol { owned get; }
			public string search { owned get; }
			public string shape { owned get; set; }
			public string target { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_audio_element_get_type ()")]
		[GIR (name = "DOMHTMLAudioElement")]
		public class HTMLAudioElement : WebKit.DOM.HTMLMediaElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLAudioElement ();
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_htmlbr_element_get_type ()")]
		[GIR (name = "DOMHTMLBRElement")]
		public class HTMLBRElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLBRElement ();
			public string get_clear ();
			public void set_clear (string value);
			public string clear { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_base_element_get_type ()")]
		[GIR (name = "DOMHTMLBaseElement")]
		public class HTMLBaseElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLBaseElement ();
			public string get_href ();
			public string get_target ();
			public void set_href (string value);
			public void set_target (string value);
			public string href { owned get; set; }
			public string target { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_base_font_element_get_type ()")]
		[GIR (name = "DOMHTMLBaseFontElement")]
		public class HTMLBaseFontElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLBaseFontElement ();
			public string get_color ();
			public string get_face ();
			public long get_size ();
			public void set_color (string value);
			public void set_face (string value);
			public void set_size (long value);
			public string color { owned get; set; }
			public string face { owned get; set; }
			public long size { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_body_element_get_type ()")]
		[GIR (name = "DOMHTMLBodyElement")]
		public class HTMLBodyElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLBodyElement ();
			public string get_a_link ();
			public string get_background ();
			public string get_bg_color ();
			public string get_link ();
			public string get_text ();
			public string get_v_link ();
			public void set_a_link (string value);
			public void set_background (string value);
			public void set_bg_color (string value);
			public void set_link (string value);
			public void set_text (string value);
			public void set_v_link (string value);
			public string a_link { owned get; set; }
			public string background { owned get; set; }
			public string bg_color { owned get; set; }
			public string link { owned get; set; }
			public string text { owned get; set; }
			public string v_link { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_button_element_get_type ()")]
		[GIR (name = "DOMHTMLButtonElement")]
		public class HTMLButtonElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLButtonElement ();
			public bool check_validity ();
			public bool get_autofocus ();
			public bool get_disabled ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public string get_form_action ();
			public string get_form_enctype ();
			public string get_form_method ();
			public bool get_form_no_validate ();
			public string get_form_target ();
			public unowned WebKit.DOM.NodeList get_labels ();
			public string get_name ();
			public string get_validation_message ();
			public unowned WebKit.DOM.ValidityState get_validity ();
			public string get_value ();
			public bool get_will_validate ();
			public void set_autofocus (bool value);
			public void set_custom_validity (string error);
			public void set_disabled (bool value);
			public void set_form_action (string value);
			public void set_form_enctype (string value);
			public void set_form_method (string value);
			public void set_form_no_validate (bool value);
			public void set_form_target (string value);
			public void set_name (string value);
			public void set_value (string value);
			public bool autofocus { get; set; }
			public bool disabled { get; set; }
			public WebKit.DOM.HTMLFormElement form { get; }
			public string form_action { owned get; set; }
			public string form_enctype { owned get; set; }
			public string form_method { owned get; set; }
			public bool form_no_validate { get; set; }
			public string form_target { owned get; set; }
			public WebKit.DOM.NodeList labels { get; }
			public string name { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
			public string validation_message { owned get; }
			public WebKit.DOM.ValidityState validity { get; }
			public string value { owned get; set; }
			public bool will_validate { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_canvas_element_get_type ()")]
		[GIR (name = "DOMHTMLCanvasElement")]
		public class HTMLCanvasElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLCanvasElement ();
			public long get_height ();
			public long get_width ();
			public void set_height (long value);
			public void set_width (long value);
			public long height { get; set; }
			public long width { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_collection_get_type ()")]
		[GIR (name = "DOMHTMLCollection")]
		public class HTMLCollection : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected HTMLCollection ();
			public ulong get_length ();
			public unowned WebKit.DOM.Node item (ulong index);
			public unowned WebKit.DOM.Node named_item (string name);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_htmld_list_element_get_type ()")]
		[GIR (name = "DOMHTMLDListElement")]
		public class HTMLDListElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLDListElement ();
			public bool get_compact ();
			public void set_compact (bool value);
			public bool compact { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_details_element_get_type ()")]
		[GIR (name = "DOMHTMLDetailsElement")]
		public class HTMLDetailsElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLDetailsElement ();
			public bool get_open ();
			public void set_open (bool value);
			public bool open { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_directory_element_get_type ()")]
		[GIR (name = "DOMHTMLDirectoryElement")]
		public class HTMLDirectoryElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLDirectoryElement ();
			public bool get_compact ();
			public void set_compact (bool value);
			public bool compact { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_div_element_get_type ()")]
		[GIR (name = "DOMHTMLDivElement")]
		public class HTMLDivElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLDivElement ();
			public string get_align ();
			public void set_align (string value);
			public string align { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_document_get_type ()")]
		[GIR (name = "DOMHTMLDocument")]
		public class HTMLDocument : WebKit.DOM.Document, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLDocument ();
			public void capture_events ();
			public void clear ();
			public void close ();
			public unowned WebKit.DOM.Element get_active_element ();
			public string get_alink_color ();
			public string get_bg_color ();
			public string get_compat_mode ();
			public string get_design_mode ();
			public string get_dir ();
			public unowned WebKit.DOM.HTMLCollection get_embeds ();
			public string get_fg_color ();
			public long get_height ();
			public string get_link_color ();
			public unowned WebKit.DOM.HTMLCollection get_plugins ();
			public unowned WebKit.DOM.HTMLCollection get_scripts ();
			public string get_vlink_color ();
			public long get_width ();
			public bool has_focus ();
			[Deprecated (since = "2.2")]
			public void open ();
			public void release_events ();
			public void set_alink_color (string value);
			public void set_bg_color (string value);
			public void set_design_mode (string value);
			public void set_dir (string value);
			public void set_fg_color (string value);
			public void set_link_color (string value);
			public void set_vlink_color (string value);
			public WebKit.DOM.Element active_element { get; }
			public string alink_color { owned get; set; }
			public string bg_color { owned get; set; }
			public string compat_mode { owned get; }
			public string design_mode { owned get; set; }
			public string dir { owned get; set; }
			public WebKit.DOM.HTMLCollection embeds { get; }
			public string fg_color { owned get; set; }
			public long height { get; }
			public string link_color { owned get; set; }
			public WebKit.DOM.HTMLCollection plugins { get; }
			public WebKit.DOM.HTMLCollection scripts { get; }
			public string vlink_color { owned get; set; }
			public long width { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_element_get_type ()")]
		[GIR (name = "DOMHTMLElement")]
		public class HTMLElement : WebKit.DOM.Element, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLElement ();
			public void click ();
			public string get_access_key ();
			public unowned WebKit.DOM.HTMLCollection get_children ();
			[Deprecated (since = "1.10")]
			public unowned WebKit.DOM.DOMTokenList get_class_list ();
			[Deprecated (since = "1.10")]
			public string get_class_name ();
			public string get_content_editable ();
			public string get_dir ();
			public bool get_draggable ();
			public bool get_hidden ();
			[Deprecated (since = "2.2")]
			public string get_id ();
			public string get_inner_html ();
			public string get_inner_text ();
			public bool get_is_content_editable ();
			[Deprecated (since = "2.2")]
			public string get_item_id ();
			[Deprecated (since = "2.2")]
			public unowned WebKit.DOM.DOMSettableTokenList get_item_prop ();
			[Deprecated (since = "2.2")]
			public unowned WebKit.DOM.DOMSettableTokenList get_item_ref ();
			[Deprecated (since = "2.2")]
			public bool get_item_scope ();
			[Deprecated (since = "2.2")]
			public void* get_item_type ();
			public string get_lang ();
			public string get_outer_html ();
			public string get_outer_text ();
			public bool get_spellcheck ();
			public long get_tab_index ();
			public string get_title ();
			public bool get_translate ();
			public string get_webkitdropzone ();
			public unowned WebKit.DOM.Element insert_adjacent_element (string where, WebKit.DOM.Element element) throws GLib.Error;
			public void insert_adjacent_html (string where, string html) throws GLib.Error;
			public void insert_adjacent_text (string where, string text) throws GLib.Error;
			public void set_access_key (string value);
			[Deprecated (since = "1.10")]
			public void set_class_name (string value);
			public void set_content_editable (string value) throws GLib.Error;
			public void set_dir (string value);
			public void set_draggable (bool value);
			public void set_hidden (bool value);
			[Deprecated (since = "2.2")]
			public void set_id (string value);
			public void set_inner_html (string value) throws GLib.Error;
			public void set_inner_text (string value) throws GLib.Error;
			[Deprecated (since = "2.2")]
			public void set_item_id (string value);
			[Deprecated (since = "2.2")]
			public void set_item_scope (bool value);
			public void set_lang (string value);
			public void set_outer_html (string value) throws GLib.Error;
			public void set_outer_text (string value) throws GLib.Error;
			public void set_spellcheck (bool value);
			public void set_tab_index (long value);
			public void set_title (string value);
			public void set_translate (bool value);
			public void set_webkitdropzone (string value);
			public string access_key { owned get; set; }
			public WebKit.DOM.HTMLCollection children { get; }
			public string content_editable { owned get; set; }
			public string dir { owned get; set; }
			public bool draggable { get; set; }
			public bool hidden { get; set; }
			public string inner_html { owned get; set; }
			public string inner_text { owned get; set; }
			public bool is_content_editable { get; }
			public string lang { owned get; set; }
			public string outer_html { owned get; set; }
			public string outer_text { owned get; set; }
			public bool spellcheck { get; set; }
			public long tab_index { get; set; }
			public string title { owned get; set; }
			public bool translate { get; set; }
			public string webkitdropzone { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_embed_element_get_type ()")]
		[GIR (name = "DOMHTMLEmbedElement")]
		public class HTMLEmbedElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLEmbedElement ();
			public string get_align ();
			public long get_height ();
			public string get_name ();
			public string get_src ();
			public long get_width ();
			public void set_align (string value);
			public void set_height (long value);
			public void set_name (string value);
			public void set_src (string value);
			public void set_width (long value);
			public string align { owned get; set; }
			public long height { get; set; }
			public string name { owned get; set; }
			public string src { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
			public long width { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_field_set_element_get_type ()")]
		[GIR (name = "DOMHTMLFieldSetElement")]
		public class HTMLFieldSetElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLFieldSetElement ();
			public bool check_validity ();
			public bool get_disabled ();
			public unowned WebKit.DOM.HTMLCollection get_elements ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public string get_name ();
			public string get_validation_message ();
			public unowned WebKit.DOM.ValidityState get_validity ();
			public bool get_will_validate ();
			public void set_custom_validity (string error);
			public void set_disabled (bool value);
			public void set_name (string value);
			public bool disabled { get; set; }
			public WebKit.DOM.HTMLCollection elements { get; }
			public WebKit.DOM.HTMLFormElement form { get; }
			public string name { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; }
			public string validation_message { owned get; }
			public WebKit.DOM.ValidityState validity { get; }
			public bool will_validate { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_font_element_get_type ()")]
		[GIR (name = "DOMHTMLFontElement")]
		public class HTMLFontElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLFontElement ();
			public string get_color ();
			public string get_face ();
			public string get_size ();
			public void set_color (string value);
			public void set_face (string value);
			public void set_size (string value);
			public string color { owned get; set; }
			public string face { owned get; set; }
			public string size { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_form_element_get_type ()")]
		[GIR (name = "DOMHTMLFormElement")]
		public class HTMLFormElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLFormElement ();
			public bool check_validity ();
			[Deprecated (since = "1.6")]
			public void dispatch_form_change ();
			[Deprecated (since = "1.6")]
			public void dispatch_form_input ();
			public string get_accept_charset ();
			public string get_action ();
			public string get_autocapitalize ();
			public string get_autocomplete ();
			public bool get_autocorrect ();
			public unowned WebKit.DOM.HTMLCollection get_elements ();
			public string get_encoding ();
			public string get_enctype ();
			public long get_length ();
			public string get_method ();
			public string get_name ();
			public bool get_no_validate ();
			public string get_target ();
			public void reset ();
			public void set_accept_charset (string value);
			public void set_action (string value);
			public void set_autocapitalize (string value);
			public void set_autocomplete (string value);
			public void set_autocorrect (bool value);
			public void set_encoding (string value);
			public void set_enctype (string value);
			public void set_method (string value);
			public void set_name (string value);
			public void set_no_validate (bool value);
			public void set_target (string value);
			public void submit ();
			public string accept_charset { owned get; set; }
			public string action { owned get; set; }
			public string autocapitalize { owned get; set; }
			public string autocomplete { owned get; set; }
			public bool autocorrect { get; set; }
			public WebKit.DOM.HTMLCollection elements { get; }
			public string encoding { owned get; set; }
			public string enctype { owned get; set; }
			public long length { get; }
			public string method { owned get; set; }
			public string name { owned get; set; }
			public bool no_validate { get; set; }
			public string target { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_frame_element_get_type ()")]
		[GIR (name = "DOMHTMLFrameElement")]
		public class HTMLFrameElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLFrameElement ();
			public unowned WebKit.DOM.Document get_content_document ();
			public unowned WebKit.DOM.DOMWindow get_content_window ();
			public string get_frame_border ();
			public long get_height ();
			public string get_long_desc ();
			public string get_margin_height ();
			public string get_margin_width ();
			public string get_name ();
			public bool get_no_resize ();
			public string get_scrolling ();
			public string get_src ();
			public long get_width ();
			public void set_frame_border (string value);
			public void set_long_desc (string value);
			public void set_margin_height (string value);
			public void set_margin_width (string value);
			public void set_name (string value);
			public void set_no_resize (bool value);
			public void set_scrolling (string value);
			public void set_src (string value);
			public WebKit.DOM.Document content_document { get; }
			public WebKit.DOM.DOMWindow content_window { get; }
			public string frame_border { owned get; set; }
			public long height { get; }
			public string long_desc { owned get; set; }
			public string margin_height { owned get; set; }
			public string margin_width { owned get; set; }
			public string name { owned get; set; }
			public bool no_resize { get; set; }
			public string scrolling { owned get; set; }
			public string src { owned get; set; }
			public long width { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_frame_set_element_get_type ()")]
		[GIR (name = "DOMHTMLFrameSetElement")]
		public class HTMLFrameSetElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLFrameSetElement ();
			public string get_cols ();
			public string get_rows ();
			public void set_cols (string value);
			public void set_rows (string value);
			public string cols { owned get; set; }
			public string rows { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_htmlhr_element_get_type ()")]
		[GIR (name = "DOMHTMLHRElement")]
		public class HTMLHRElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLHRElement ();
			public string get_align ();
			public bool get_no_shade ();
			public string get_size ();
			public string get_width ();
			public void set_align (string value);
			public void set_no_shade (bool value);
			public void set_size (string value);
			public void set_width (string value);
			public string align { owned get; set; }
			public bool no_shade { get; set; }
			public string size { owned get; set; }
			public string width { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_head_element_get_type ()")]
		[GIR (name = "DOMHTMLHeadElement")]
		public class HTMLHeadElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLHeadElement ();
			public string get_profile ();
			public void set_profile (string value);
			public string profile { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_heading_element_get_type ()")]
		[GIR (name = "DOMHTMLHeadingElement")]
		public class HTMLHeadingElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLHeadingElement ();
			public string get_align ();
			public void set_align (string value);
			public string align { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_html_element_get_type ()")]
		[GIR (name = "DOMHTMLHtmlElement")]
		public class HTMLHtmlElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLHtmlElement ();
			public string get_manifest ();
			public string get_version ();
			public void set_manifest (string value);
			public void set_version (string value);
			public string manifest { owned get; set; }
			public string version { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", lower_case_cprefix = "webkit_dom_html_iframe_element_", type_id = "webkit_dom_html_iframe_element_get_type ()")]
		[GIR (name = "DOMHTMLIFrameElement")]
		public class HTMLIFrameElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLIFrameElement ();
			public string get_align ();
			public unowned WebKit.DOM.Document get_content_document ();
			public unowned WebKit.DOM.DOMWindow get_content_window ();
			public string get_frame_border ();
			public string get_height ();
			public string get_long_desc ();
			public string get_margin_height ();
			public string get_margin_width ();
			public string get_name ();
			public string get_sandbox ();
			public string get_scrolling ();
			public bool get_seamless ();
			public string get_src ();
			public string get_srcdoc ();
			public string get_width ();
			public void set_align (string value);
			public void set_frame_border (string value);
			public void set_height (string value);
			public void set_long_desc (string value);
			public void set_margin_height (string value);
			public void set_margin_width (string value);
			public void set_name (string value);
			public void set_sandbox (string value);
			public void set_scrolling (string value);
			public void set_seamless (bool value);
			public void set_src (string value);
			public void set_srcdoc (string value);
			public void set_width (string value);
			public string align { owned get; set; }
			public WebKit.DOM.Document content_document { get; }
			public WebKit.DOM.DOMWindow content_window { get; }
			public string frame_border { owned get; set; }
			public string height { owned get; set; }
			public string long_desc { owned get; set; }
			public string margin_height { owned get; set; }
			public string margin_width { owned get; set; }
			public string name { owned get; set; }
			public string sandbox { owned get; set; }
			public string scrolling { owned get; set; }
			public bool seamless { get; set; }
			public string src { owned get; set; }
			public string srcdoc { owned get; set; }
			public string width { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_image_element_get_type ()")]
		[GIR (name = "DOMHTMLImageElement")]
		public class HTMLImageElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLImageElement ();
			public string get_align ();
			public string get_alt ();
			public string get_border ();
			public bool get_complete ();
			public string get_cross_origin ();
			public long get_height ();
			public long get_hspace ();
			public bool get_is_map ();
			public string get_long_desc ();
			public string get_lowsrc ();
			public string get_name ();
			public long get_natural_height ();
			public long get_natural_width ();
			public string get_src ();
			public string get_srcset ();
			public string get_use_map ();
			public long get_vspace ();
			public long get_width ();
			public long get_x ();
			public long get_y ();
			public void set_align (string value);
			public void set_alt (string value);
			public void set_border (string value);
			public void set_cross_origin (string value);
			public void set_height (long value);
			public void set_hspace (long value);
			public void set_is_map (bool value);
			public void set_long_desc (string value);
			public void set_lowsrc (string value);
			public void set_name (string value);
			public void set_src (string value);
			public void set_srcset (string value);
			public void set_use_map (string value);
			public void set_vspace (long value);
			public void set_width (long value);
			public string align { owned get; set; }
			public string alt { owned get; set; }
			public string border { owned get; set; }
			public bool complete { get; }
			public string cross_origin { owned get; set; }
			public long height { get; set; }
			public long hspace { get; set; }
			public bool is_map { get; set; }
			public string long_desc { owned get; set; }
			public string lowsrc { owned get; set; }
			public string name { owned get; set; }
			public long natural_height { get; }
			public long natural_width { get; }
			public string src { owned get; set; }
			public string srcset { owned get; set; }
			public string use_map { owned get; set; }
			public long vspace { get; set; }
			public long width { get; set; }
			public long x { get; }
			public long y { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_input_element_get_type ()")]
		[GIR (name = "DOMHTMLInputElement")]
		public class HTMLInputElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLInputElement ();
			public bool check_validity ();
			public string get_accept ();
			public string get_align ();
			public string get_alt ();
			public string get_autocapitalize ();
			public string get_autocomplete ();
			public bool get_autocorrect ();
			public bool get_autofocus ();
			public string get_capture ();
			public bool get_checked ();
			public bool get_default_checked ();
			public string get_default_value ();
			public string get_dir_name ();
			public bool get_disabled ();
			public unowned WebKit.DOM.FileList get_files ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public string get_form_action ();
			public string get_form_enctype ();
			public string get_form_method ();
			public bool get_form_no_validate ();
			public string get_form_target ();
			public ulong get_height ();
			public bool get_incremental ();
			public bool get_indeterminate ();
			public unowned WebKit.DOM.NodeList get_labels ();
			public unowned WebKit.DOM.HTMLElement get_list ();
			public string get_max ();
			public long get_max_length ();
			public string get_min ();
			public bool get_multiple ();
			public string get_name ();
			public string get_pattern ();
			public string get_placeholder ();
			public bool get_read_only ();
			public bool get_required ();
			public ulong get_size ();
			public string get_src ();
			public string get_step ();
			public string get_use_map ();
			public string get_validation_message ();
			public unowned WebKit.DOM.ValidityState get_validity ();
			public string get_value ();
			public double get_value_as_number ();
			public bool get_webkit_grammar ();
			public bool get_webkit_speech ();
			public bool get_webkitdirectory ();
			public ulong get_width ();
			public bool get_will_validate ();
			public bool is_edited ();
			public void select ();
			public void set_accept (string value);
			public void set_align (string value);
			public void set_alt (string value);
			public void set_autocapitalize (string value);
			public void set_autocomplete (string value);
			public void set_autocorrect (bool value);
			public void set_autofocus (bool value);
			public void set_capture (string value);
			public void set_checked (bool value);
			public void set_custom_validity (string error);
			public void set_default_checked (bool value);
			public void set_default_value (string value);
			public void set_dir_name (string value);
			public void set_disabled (bool value);
			public void set_files (WebKit.DOM.FileList value);
			public void set_form_action (string value);
			public void set_form_enctype (string value);
			public void set_form_method (string value);
			public void set_form_no_validate (bool value);
			public void set_form_target (string value);
			public void set_height (ulong value);
			public void set_incremental (bool value);
			public void set_indeterminate (bool value);
			public void set_max (string value);
			public void set_max_length (long value) throws GLib.Error;
			public void set_min (string value);
			public void set_multiple (bool value);
			public void set_name (string value);
			public void set_pattern (string value);
			public void set_placeholder (string value);
			public void set_range_text (string replacement, ulong start, ulong end, string selectionMode) throws GLib.Error;
			public void set_read_only (bool value);
			public void set_required (bool value);
			public void set_size (ulong value) throws GLib.Error;
			public void set_src (string value);
			public void set_step (string value);
			public void set_use_map (string value);
			public void set_value (string value);
			public void set_value_as_number (double value) throws GLib.Error;
			public void set_value_for_user (string value);
			public void set_webkit_grammar (bool value);
			public void set_webkit_speech (bool value);
			public void set_webkitdirectory (bool value);
			public void set_width (ulong value);
			public void step_down (long n) throws GLib.Error;
			public void step_up (long n) throws GLib.Error;
			public string accept { owned get; set; }
			public string align { owned get; set; }
			public string alt { owned get; set; }
			public string autocapitalize { owned get; set; }
			public string autocomplete { owned get; set; }
			public bool autocorrect { get; set; }
			public bool autofocus { get; set; }
			public string capture { owned get; set; }
			public bool checked { get; set; }
			public bool default_checked { get; set; }
			public string default_value { owned get; set; }
			public string dir_name { owned get; set; }
			public bool disabled { get; set; }
			public WebKit.DOM.FileList files { get; }
			public WebKit.DOM.HTMLFormElement form { get; }
			public string form_action { owned get; set; }
			public string form_enctype { owned get; set; }
			public string form_method { owned get; set; }
			public bool form_no_validate { get; set; }
			public string form_target { owned get; set; }
			public ulong height { get; set; }
			public bool incremental { get; set; }
			public bool indeterminate { get; set; }
			public WebKit.DOM.NodeList labels { get; }
			public WebKit.DOM.HTMLElement list { get; }
			public string max { owned get; set; }
			public long max_length { get; set; }
			public string min { owned get; set; }
			public bool multiple { get; set; }
			public string name { owned get; set; }
			public string pattern { owned get; set; }
			public string placeholder { owned get; set; }
			public bool read_only { get; set; }
			public bool required { get; set; }
			public ulong size { get; set; }
			public string src { owned get; set; }
			public string step { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
			public string use_map { owned get; set; }
			public string validation_message { owned get; }
			public WebKit.DOM.ValidityState validity { get; }
			public string value { owned get; set; }
			public double value_as_number { get; set; }
			public bool webkit_grammar { get; set; }
			public bool webkit_speech { get; set; }
			public bool webkitdirectory { get; set; }
			public ulong width { get; set; }
			public bool will_validate { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_keygen_element_get_type ()")]
		[GIR (name = "DOMHTMLKeygenElement")]
		public class HTMLKeygenElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLKeygenElement ();
			public bool check_validity ();
			public bool get_autofocus ();
			public string get_challenge ();
			public bool get_disabled ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public string get_keytype ();
			public unowned WebKit.DOM.NodeList get_labels ();
			public string get_name ();
			public string get_validation_message ();
			public unowned WebKit.DOM.ValidityState get_validity ();
			public bool get_will_validate ();
			public void set_autofocus (bool value);
			public void set_challenge (string value);
			public void set_custom_validity (string error);
			public void set_disabled (bool value);
			public void set_keytype (string value);
			public void set_name (string value);
			public bool autofocus { get; set; }
			public string challenge { owned get; set; }
			public bool disabled { get; set; }
			public WebKit.DOM.HTMLFormElement form { get; }
			public string keytype { owned get; set; }
			public WebKit.DOM.NodeList labels { get; }
			public string name { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; }
			public string validation_message { owned get; }
			public WebKit.DOM.ValidityState validity { get; }
			public bool will_validate { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_htmlli_element_get_type ()")]
		[GIR (name = "DOMHTMLLIElement")]
		public class HTMLLIElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLLIElement ();
			public long get_value ();
			public void set_value (long value);
			[NoAccessorMethod]
			public string type { owned get; set; }
			public long value { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_label_element_get_type ()")]
		[GIR (name = "DOMHTMLLabelElement")]
		public class HTMLLabelElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLLabelElement ();
			public unowned WebKit.DOM.HTMLElement get_control ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public string get_html_for ();
			public void set_html_for (string value);
			public WebKit.DOM.HTMLElement control { get; }
			public WebKit.DOM.HTMLFormElement form { get; }
			public string html_for { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_legend_element_get_type ()")]
		[GIR (name = "DOMHTMLLegendElement")]
		public class HTMLLegendElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLLegendElement ();
			public string get_align ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public void set_align (string value);
			public string align { owned get; set; }
			public WebKit.DOM.HTMLFormElement form { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_link_element_get_type ()")]
		[GIR (name = "DOMHTMLLinkElement")]
		public class HTMLLinkElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLLinkElement ();
			public string get_charset ();
			public bool get_disabled ();
			public string get_href ();
			public string get_hreflang ();
			public string get_media ();
			public string get_rel ();
			public string get_rev ();
			public unowned WebKit.DOM.StyleSheet get_sheet ();
			public string get_target ();
			public void set_charset (string value);
			public void set_disabled (bool value);
			public void set_href (string value);
			public void set_hreflang (string value);
			public void set_media (string value);
			public void set_rel (string value);
			public void set_rev (string value);
			public void set_target (string value);
			public string charset { owned get; set; }
			public bool disabled { get; set; }
			public string href { owned get; set; }
			public string hreflang { owned get; set; }
			public string media { owned get; set; }
			public string rel { owned get; set; }
			public string rev { owned get; set; }
			public WebKit.DOM.StyleSheet sheet { get; }
			public string target { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_map_element_get_type ()")]
		[GIR (name = "DOMHTMLMapElement")]
		public class HTMLMapElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLMapElement ();
			public unowned WebKit.DOM.HTMLCollection get_areas ();
			public string get_name ();
			public void set_name (string value);
			public WebKit.DOM.HTMLCollection areas { get; }
			public string name { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_marquee_element_get_type ()")]
		[GIR (name = "DOMHTMLMarqueeElement")]
		public class HTMLMarqueeElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLMarqueeElement ();
			public string get_behavior ();
			public string get_bg_color ();
			public string get_direction ();
			public string get_height ();
			public ulong get_hspace ();
			public long get_loop ();
			public long get_scroll_amount ();
			public long get_scroll_delay ();
			public bool get_true_speed ();
			public ulong get_vspace ();
			public string get_width ();
			public void set_behavior (string value);
			public void set_bg_color (string value);
			public void set_direction (string value);
			public void set_height (string value);
			public void set_hspace (ulong value);
			public void set_loop (long value) throws GLib.Error;
			public void set_scroll_amount (long value) throws GLib.Error;
			public void set_scroll_delay (long value) throws GLib.Error;
			public void set_true_speed (bool value);
			public void set_vspace (ulong value);
			public void set_width (string value);
			public void start ();
			public void stop ();
			public string behavior { owned get; set; }
			public string bg_color { owned get; set; }
			public string direction { owned get; set; }
			public string height { owned get; set; }
			public ulong hspace { get; set; }
			public long loop { get; set; }
			public long scroll_amount { get; set; }
			public long scroll_delay { get; set; }
			public bool true_speed { get; set; }
			public ulong vspace { get; set; }
			public string width { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_media_element_get_type ()")]
		[GIR (name = "DOMHTMLMediaElement")]
		public class HTMLMediaElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLMediaElement ();
			public string can_play_type (string type);
			public void fast_seek (double time);
			public bool get_autoplay ();
			public unowned WebKit.DOM.TimeRanges get_buffered ();
			public unowned WebKit.DOM.MediaController get_controller ();
			public bool get_controls ();
			public string get_current_src ();
			public double get_current_time ();
			public bool get_default_muted ();
			public double get_default_playback_rate ();
			public double get_duration ();
			public bool get_ended ();
			public unowned WebKit.DOM.MediaError get_error ();
			[Deprecated (since = "2.2")]
			public double get_initial_time ();
			public bool get_loop ();
			public string get_media_group ();
			public bool get_muted ();
			public ushort get_network_state ();
			public bool get_paused ();
			public double get_playback_rate ();
			public unowned WebKit.DOM.TimeRanges get_played ();
			public string get_preload ();
			public ushort get_ready_state ();
			public unowned WebKit.DOM.TimeRanges get_seekable ();
			public bool get_seeking ();
			public string get_src ();
			[Deprecated (since = "2.2")]
			public double get_start_time ();
			public double get_volume ();
			public ulong get_webkit_audio_decoded_byte_count ();
			public bool get_webkit_closed_captions_visible ();
			public bool get_webkit_current_playback_target_is_wireless ();
			public bool get_webkit_has_closed_captions ();
			public bool get_webkit_preserves_pitch ();
			public ulong get_webkit_video_decoded_byte_count ();
			public void load ();
			public void pause ();
			public void play ();
			public void set_autoplay (bool value);
			public void set_controls (bool value);
			public void set_current_time (double value) throws GLib.Error;
			public void set_default_muted (bool value);
			public void set_default_playback_rate (double value);
			public void set_loop (bool value);
			public void set_media_group (string value);
			public void set_muted (bool value);
			public void set_playback_rate (double value);
			public void set_preload (string value);
			public void set_src (string value);
			public void set_volume (double value) throws GLib.Error;
			public void set_webkit_closed_captions_visible (bool value);
			public void set_webkit_preserves_pitch (bool value);
			public void webkit_show_playback_target_picker ();
			public bool autoplay { get; set; }
			public WebKit.DOM.TimeRanges buffered { get; }
			public WebKit.DOM.MediaController controller { get; }
			public bool controls { get; set; }
			public string current_src { owned get; }
			public double current_time { get; set; }
			public bool default_muted { get; set; }
			public double default_playback_rate { get; set; }
			public double duration { get; }
			public bool ended { get; }
			public WebKit.DOM.MediaError error { get; }
			public bool loop { get; set; }
			public string media_group { owned get; set; }
			public bool muted { get; set; }
			public uint network_state { get; }
			public bool paused { get; }
			public double playback_rate { get; set; }
			public WebKit.DOM.TimeRanges played { get; }
			public string preload { owned get; set; }
			public uint ready_state { get; }
			public WebKit.DOM.TimeRanges seekable { get; }
			public bool seeking { get; }
			public string src { owned get; set; }
			public double volume { get; set; }
			public ulong webkit_audio_decoded_byte_count { get; }
			public bool webkit_closed_captions_visible { get; set; }
			public bool webkit_current_playback_target_is_wireless { get; }
			public bool webkit_has_closed_captions { get; }
			public bool webkit_preserves_pitch { get; set; }
			public ulong webkit_video_decoded_byte_count { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_menu_element_get_type ()")]
		[GIR (name = "DOMHTMLMenuElement")]
		public class HTMLMenuElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLMenuElement ();
			public bool get_compact ();
			public void set_compact (bool value);
			public bool compact { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_meta_element_get_type ()")]
		[GIR (name = "DOMHTMLMetaElement")]
		public class HTMLMetaElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLMetaElement ();
			public string get_content ();
			public string get_http_equiv ();
			public string get_name ();
			public string get_scheme ();
			public void set_content (string value);
			public void set_http_equiv (string value);
			public void set_name (string value);
			public void set_scheme (string value);
			public string content { owned get; set; }
			public string http_equiv { owned get; set; }
			public string name { owned get; set; }
			public string scheme { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_mod_element_get_type ()")]
		[GIR (name = "DOMHTMLModElement")]
		public class HTMLModElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLModElement ();
			public string get_cite ();
			public string get_date_time ();
			public void set_cite (string value);
			public void set_date_time (string value);
			public string cite { owned get; set; }
			public string date_time { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_htmlo_list_element_get_type ()")]
		[GIR (name = "DOMHTMLOListElement")]
		public class HTMLOListElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLOListElement ();
			public bool get_compact ();
			public bool get_reversed ();
			public long get_start ();
			public void set_compact (bool value);
			public void set_reversed (bool value);
			public void set_start (long value);
			public bool compact { get; set; }
			public bool reversed { get; set; }
			public long start { get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_object_element_get_type ()")]
		[GIR (name = "DOMHTMLObjectElement")]
		public class HTMLObjectElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLObjectElement ();
			public bool check_validity ();
			public string get_align ();
			public string get_archive ();
			public string get_border ();
			public string get_code ();
			public string get_code_base ();
			public string get_code_type ();
			public unowned WebKit.DOM.Document get_content_document ();
			public string get_data ();
			public bool get_declare ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public string get_height ();
			public long get_hspace ();
			public string get_name ();
			public string get_standby ();
			public string get_use_map ();
			public string get_validation_message ();
			public unowned WebKit.DOM.ValidityState get_validity ();
			public long get_vspace ();
			public string get_width ();
			public bool get_will_validate ();
			public void set_align (string value);
			public void set_archive (string value);
			public void set_border (string value);
			public void set_code (string value);
			public void set_code_base (string value);
			public void set_code_type (string value);
			public void set_custom_validity (string error);
			public void set_data (string value);
			public void set_declare (bool value);
			public void set_height (string value);
			public void set_hspace (long value);
			public void set_name (string value);
			public void set_standby (string value);
			public void set_use_map (string value);
			public void set_vspace (long value);
			public void set_width (string value);
			public string align { owned get; set; }
			public string archive { owned get; set; }
			public string border { owned get; set; }
			public string code { owned get; set; }
			public string code_base { owned get; set; }
			public string code_type { owned get; set; }
			public WebKit.DOM.Document content_document { get; }
			public string data { owned get; set; }
			public bool declare { get; set; }
			public WebKit.DOM.HTMLFormElement form { get; }
			public string height { owned get; set; }
			public long hspace { get; set; }
			public string name { owned get; set; }
			public string standby { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
			public string use_map { owned get; set; }
			public string validation_message { owned get; }
			public WebKit.DOM.ValidityState validity { get; }
			public long vspace { get; set; }
			public string width { owned get; set; }
			public bool will_validate { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_opt_group_element_get_type ()")]
		[GIR (name = "DOMHTMLOptGroupElement")]
		public class HTMLOptGroupElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLOptGroupElement ();
			public bool get_disabled ();
			public string get_label ();
			public void set_disabled (bool value);
			public void set_label (string value);
			public bool disabled { get; set; }
			public string label { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_option_element_get_type ()")]
		[GIR (name = "DOMHTMLOptionElement")]
		public class HTMLOptionElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLOptionElement ();
			public bool get_default_selected ();
			public bool get_disabled ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public long get_index ();
			public string get_label ();
			public bool get_selected ();
			public string get_text ();
			public string get_value ();
			public void set_default_selected (bool value);
			public void set_disabled (bool value);
			public void set_label (string value);
			public void set_selected (bool value);
			public void set_value (string value);
			public bool default_selected { get; set; }
			public bool disabled { get; set; }
			public WebKit.DOM.HTMLFormElement form { get; }
			public long index { get; }
			public string label { owned get; set; }
			public bool selected { get; set; }
			public string text { owned get; }
			public string value { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_options_collection_get_type ()")]
		[GIR (name = "DOMHTMLOptionsCollection")]
		public class HTMLOptionsCollection : WebKit.DOM.HTMLCollection {
			[CCode (has_construct_function = false)]
			protected HTMLOptionsCollection ();
			public ulong get_length ();
			public long get_selected_index ();
			public unowned WebKit.DOM.Node named_item (string name);
			public void set_selected_index (long value);
			public ulong length { get; }
			public long selected_index { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_paragraph_element_get_type ()")]
		[GIR (name = "DOMHTMLParagraphElement")]
		public class HTMLParagraphElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLParagraphElement ();
			public string get_align ();
			public void set_align (string value);
			public string align { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_param_element_get_type ()")]
		[GIR (name = "DOMHTMLParamElement")]
		public class HTMLParamElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLParamElement ();
			public string get_name ();
			public string get_value ();
			public string get_value_type ();
			public void set_name (string value);
			public void set_value (string value);
			public void set_value_type (string value);
			public string name { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
			public string value { owned get; set; }
			public string value_type { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_pre_element_get_type ()")]
		[GIR (name = "DOMHTMLPreElement")]
		public class HTMLPreElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLPreElement ();
			public long get_width ();
			public bool get_wrap ();
			public void set_width (long value);
			public void set_wrap (bool value);
			public long width { get; set; }
			public bool wrap { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_properties_collection_get_type ()")]
		[GIR (name = "DOMHTMLPropertiesCollection")]
		public class HTMLPropertiesCollection : WebKit.DOM.HTMLCollection {
			[CCode (has_construct_function = false)]
			protected HTMLPropertiesCollection ();
			[Deprecated (since = "2.2")]
			public static ulong get_length (void* self);
			[Deprecated (since = "2.2")]
			public static unowned WebKit.DOM.DOMStringList get_names (void* self);
			[Deprecated (since = "2.2")]
			public static unowned WebKit.DOM.Node item (void* self, ulong index);
			[Deprecated (since = "2.2")]
			public static void* named_item (void* self, string name);
			[NoAccessorMethod]
			public ulong length { get; }
			[NoAccessorMethod]
			public WebKit.DOM.DOMStringList names { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_quote_element_get_type ()")]
		[GIR (name = "DOMHTMLQuoteElement")]
		public class HTMLQuoteElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLQuoteElement ();
			public string get_cite ();
			public void set_cite (string value);
			public string cite { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_script_element_get_type ()")]
		[GIR (name = "DOMHTMLScriptElement")]
		public class HTMLScriptElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLScriptElement ();
			public bool get_async ();
			public string get_charset ();
			public string get_cross_origin ();
			public bool get_defer ();
			public string get_event ();
			public string get_html_for ();
			public string get_nonce ();
			public string get_src ();
			public string get_text ();
			public void set_async (bool value);
			public void set_charset (string value);
			public void set_cross_origin (string value);
			public void set_defer (bool value);
			public void set_event (string value);
			public void set_html_for (string value);
			public void set_nonce (string value);
			public void set_src (string value);
			public void set_text (string value);
			public bool @async { get; set; }
			public string charset { owned get; set; }
			public string cross_origin { owned get; set; }
			public bool defer { get; set; }
			public string event { owned get; set; }
			public string html_for { owned get; set; }
			public string nonce { owned get; set; }
			public string src { owned get; set; }
			public string text { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_select_element_get_type ()")]
		[GIR (name = "DOMHTMLSelectElement")]
		public class HTMLSelectElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLSelectElement ();
			public void add (WebKit.DOM.HTMLElement element, WebKit.DOM.HTMLElement before) throws GLib.Error;
			public bool check_validity ();
			public bool get_autofocus ();
			public bool get_disabled ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public unowned WebKit.DOM.NodeList get_labels ();
			public ulong get_length ();
			public bool get_multiple ();
			public string get_name ();
			public unowned WebKit.DOM.HTMLOptionsCollection get_options ();
			public bool get_required ();
			public long get_selected_index ();
			public unowned WebKit.DOM.HTMLCollection get_selected_options ();
			public long get_size ();
			public string get_validation_message ();
			public unowned WebKit.DOM.ValidityState get_validity ();
			public string get_value ();
			public bool get_will_validate ();
			public unowned WebKit.DOM.Node item (ulong index);
			public unowned WebKit.DOM.Node named_item (string name);
			public void remove (long index);
			public void set_autofocus (bool value);
			public void set_custom_validity (string error);
			public void set_disabled (bool value);
			public void set_length (ulong value) throws GLib.Error;
			public void set_multiple (bool value);
			public void set_name (string value);
			public void set_required (bool value);
			public void set_selected_index (long value);
			public void set_size (long value);
			public void set_value (string value);
			public bool autofocus { get; set; }
			public bool disabled { get; set; }
			public WebKit.DOM.HTMLFormElement form { get; }
			public WebKit.DOM.NodeList labels { get; }
			public ulong length { get; set; }
			public bool multiple { get; set; }
			public string name { owned get; set; }
			public WebKit.DOM.HTMLOptionsCollection options { get; }
			public bool required { get; set; }
			public long selected_index { get; set; }
			public WebKit.DOM.HTMLCollection selected_options { get; }
			public long size { get; set; }
			[NoAccessorMethod]
			public string type { owned get; }
			public string validation_message { owned get; }
			public WebKit.DOM.ValidityState validity { get; }
			public string value { owned get; set; }
			public bool will_validate { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_style_element_get_type ()")]
		[GIR (name = "DOMHTMLStyleElement")]
		public class HTMLStyleElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLStyleElement ();
			public bool get_disabled ();
			public string get_media ();
			[Deprecated (since = "2.2")]
			public bool get_scoped ();
			public unowned WebKit.DOM.StyleSheet get_sheet ();
			public void set_disabled (bool value);
			public void set_media (string value);
			[Deprecated (since = "2.2")]
			public void set_scoped (bool value);
			public bool disabled { get; set; }
			public string media { owned get; set; }
			public WebKit.DOM.StyleSheet sheet { get; }
			[NoAccessorMethod]
			public string type { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_table_caption_element_get_type ()")]
		[GIR (name = "DOMHTMLTableCaptionElement")]
		public class HTMLTableCaptionElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTableCaptionElement ();
			public string get_align ();
			public void set_align (string value);
			public string align { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_table_cell_element_get_type ()")]
		[GIR (name = "DOMHTMLTableCellElement")]
		public class HTMLTableCellElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTableCellElement ();
			public string get_abbr ();
			public string get_align ();
			public string get_axis ();
			public string get_bg_color ();
			public long get_cell_index ();
			public string get_ch ();
			public string get_ch_off ();
			public long get_col_span ();
			public string get_headers ();
			public string get_height ();
			public bool get_no_wrap ();
			public long get_row_span ();
			public string get_scope ();
			public string get_v_align ();
			public string get_width ();
			public void set_abbr (string value);
			public void set_align (string value);
			public void set_axis (string value);
			public void set_bg_color (string value);
			public void set_ch (string value);
			public void set_ch_off (string value);
			public void set_col_span (long value);
			public void set_headers (string value);
			public void set_height (string value);
			public void set_no_wrap (bool value);
			public void set_row_span (long value);
			public void set_scope (string value);
			public void set_v_align (string value);
			public void set_width (string value);
			public string abbr { owned get; set; }
			public string align { owned get; set; }
			public string axis { owned get; set; }
			public string bg_color { owned get; set; }
			public long cell_index { get; }
			public string ch { owned get; set; }
			public string ch_off { owned get; set; }
			public long col_span { get; set; }
			public string headers { owned get; set; }
			public string height { owned get; set; }
			public bool no_wrap { get; set; }
			public long row_span { get; set; }
			public string scope { owned get; set; }
			public string v_align { owned get; set; }
			public string width { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_table_col_element_get_type ()")]
		[GIR (name = "DOMHTMLTableColElement")]
		public class HTMLTableColElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTableColElement ();
			public string get_align ();
			public string get_ch ();
			public string get_ch_off ();
			public long get_span ();
			public string get_v_align ();
			public string get_width ();
			public void set_align (string value);
			public void set_ch (string value);
			public void set_ch_off (string value);
			public void set_span (long value);
			public void set_v_align (string value);
			public void set_width (string value);
			public string align { owned get; set; }
			public string ch { owned get; set; }
			public string ch_off { owned get; set; }
			public long span { get; set; }
			public string v_align { owned get; set; }
			public string width { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_table_element_get_type ()")]
		[GIR (name = "DOMHTMLTableElement")]
		public class HTMLTableElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTableElement ();
			public unowned WebKit.DOM.HTMLElement create_caption ();
			public unowned WebKit.DOM.HTMLElement create_t_body ();
			public unowned WebKit.DOM.HTMLElement create_t_foot ();
			public unowned WebKit.DOM.HTMLElement create_t_head ();
			public void delete_caption ();
			public void delete_row (long index) throws GLib.Error;
			public void delete_t_foot ();
			public void delete_t_head ();
			public string get_align ();
			public string get_bg_color ();
			public string get_border ();
			public unowned WebKit.DOM.HTMLTableCaptionElement get_caption ();
			public string get_cell_padding ();
			public string get_cell_spacing ();
			public string get_frame ();
			public unowned WebKit.DOM.HTMLCollection get_rows ();
			public string get_rules ();
			public string get_summary ();
			public unowned WebKit.DOM.HTMLCollection get_t_bodies ();
			public unowned WebKit.DOM.HTMLTableSectionElement get_t_foot ();
			public unowned WebKit.DOM.HTMLTableSectionElement get_t_head ();
			public string get_width ();
			public unowned WebKit.DOM.HTMLElement insert_row (long index) throws GLib.Error;
			public void set_align (string value);
			public void set_bg_color (string value);
			public void set_border (string value);
			public void set_caption (WebKit.DOM.HTMLTableCaptionElement value) throws GLib.Error;
			public void set_cell_padding (string value);
			public void set_cell_spacing (string value);
			public void set_frame (string value);
			public void set_rules (string value);
			public void set_summary (string value);
			public void set_t_foot (WebKit.DOM.HTMLTableSectionElement value) throws GLib.Error;
			public void set_t_head (WebKit.DOM.HTMLTableSectionElement value) throws GLib.Error;
			public void set_width (string value);
			public string align { owned get; set; }
			public string bg_color { owned get; set; }
			public string border { owned get; set; }
			public WebKit.DOM.HTMLTableCaptionElement caption { get; }
			public string cell_padding { owned get; set; }
			public string cell_spacing { owned get; set; }
			public string frame { owned get; set; }
			public WebKit.DOM.HTMLCollection rows { get; }
			public string rules { owned get; set; }
			public string summary { owned get; set; }
			public WebKit.DOM.HTMLCollection t_bodies { get; }
			public WebKit.DOM.HTMLTableSectionElement t_foot { get; }
			public WebKit.DOM.HTMLTableSectionElement t_head { get; }
			public string width { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_table_row_element_get_type ()")]
		[GIR (name = "DOMHTMLTableRowElement")]
		public class HTMLTableRowElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTableRowElement ();
			public void delete_cell (long index) throws GLib.Error;
			public string get_align ();
			public string get_bg_color ();
			public unowned WebKit.DOM.HTMLCollection get_cells ();
			public string get_ch ();
			public string get_ch_off ();
			public long get_row_index ();
			public long get_section_row_index ();
			public string get_v_align ();
			public unowned WebKit.DOM.HTMLElement insert_cell (long index) throws GLib.Error;
			public void set_align (string value);
			public void set_bg_color (string value);
			public void set_ch (string value);
			public void set_ch_off (string value);
			public void set_v_align (string value);
			public string align { owned get; set; }
			public string bg_color { owned get; set; }
			public WebKit.DOM.HTMLCollection cells { get; }
			public string ch { owned get; set; }
			public string ch_off { owned get; set; }
			public long row_index { get; }
			public long section_row_index { get; }
			public string v_align { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_table_section_element_get_type ()")]
		[GIR (name = "DOMHTMLTableSectionElement")]
		public class HTMLTableSectionElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTableSectionElement ();
			public void delete_row (long index) throws GLib.Error;
			public string get_align ();
			public string get_ch ();
			public string get_ch_off ();
			public unowned WebKit.DOM.HTMLCollection get_rows ();
			public string get_v_align ();
			public unowned WebKit.DOM.HTMLElement insert_row (long index) throws GLib.Error;
			public void set_align (string value);
			public void set_ch (string value);
			public void set_ch_off (string value);
			public void set_v_align (string value);
			public string align { owned get; set; }
			public string ch { owned get; set; }
			public string ch_off { owned get; set; }
			public WebKit.DOM.HTMLCollection rows { get; }
			public string v_align { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_text_area_element_get_type ()")]
		[GIR (name = "DOMHTMLTextAreaElement")]
		public class HTMLTextAreaElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTextAreaElement ();
			public bool check_validity ();
			public string get_autocapitalize ();
			public bool get_autocorrect ();
			public bool get_autofocus ();
			public long get_cols ();
			public string get_default_value ();
			public string get_dir_name ();
			public bool get_disabled ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public unowned WebKit.DOM.NodeList get_labels ();
			public long get_max_length ();
			public string get_name ();
			public string get_placeholder ();
			public bool get_read_only ();
			public bool get_required ();
			public long get_rows ();
			public string get_selection_direction ();
			public long get_selection_end ();
			public long get_selection_start ();
			public ulong get_text_length ();
			public string get_validation_message ();
			public unowned WebKit.DOM.ValidityState get_validity ();
			public string get_value ();
			public bool get_will_validate ();
			public string get_wrap ();
			public bool is_edited ();
			public void select ();
			public void set_autocapitalize (string value);
			public void set_autocorrect (bool value);
			public void set_autofocus (bool value);
			public void set_cols (long value);
			public void set_custom_validity (string error);
			public void set_default_value (string value);
			public void set_dir_name (string value);
			public void set_disabled (bool value);
			public void set_max_length (long value) throws GLib.Error;
			public void set_name (string value);
			public void set_placeholder (string value);
			public void set_range_text (string replacement, ulong start, ulong end, string selectionMode) throws GLib.Error;
			public void set_read_only (bool value);
			public void set_required (bool value);
			public void set_rows (long value);
			public void set_selection_direction (string value);
			public void set_selection_end (long value);
			public void set_selection_range (long start, long end, string direction);
			public void set_selection_start (long value);
			public void set_value (string value);
			public void set_wrap (string value);
			public string autocapitalize { owned get; set; }
			public bool autocorrect { get; set; }
			public bool autofocus { get; set; }
			public long cols { get; set; }
			public string default_value { owned get; set; }
			public string dir_name { owned get; set; }
			public bool disabled { get; set; }
			public WebKit.DOM.HTMLFormElement form { get; }
			public WebKit.DOM.NodeList labels { get; }
			public long max_length { get; set; }
			public string name { owned get; set; }
			public string placeholder { owned get; set; }
			public bool read_only { get; set; }
			public bool required { get; set; }
			public long rows { get; set; }
			public string selection_direction { owned get; set; }
			public long selection_end { get; set; }
			public long selection_start { get; set; }
			public ulong text_length { get; }
			[NoAccessorMethod]
			public string type { owned get; }
			public string validation_message { owned get; }
			public WebKit.DOM.ValidityState validity { get; }
			public string value { owned get; set; }
			public bool will_validate { get; }
			public string wrap { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_title_element_get_type ()")]
		[GIR (name = "DOMHTMLTitleElement")]
		public class HTMLTitleElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTitleElement ();
			public string get_text ();
			public void set_text (string value);
			public string text { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_htmlu_list_element_get_type ()")]
		[GIR (name = "DOMHTMLUListElement")]
		public class HTMLUListElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLUListElement ();
			public bool get_compact ();
			public void set_compact (bool value);
			public bool compact { get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_video_element_get_type ()")]
		[GIR (name = "DOMHTMLVideoElement")]
		public class HTMLVideoElement : WebKit.DOM.HTMLMediaElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLVideoElement ();
			public ulong get_height ();
			public string get_poster ();
			public ulong get_video_height ();
			public ulong get_video_width ();
			public ulong get_webkit_decoded_frame_count ();
			public bool get_webkit_displaying_fullscreen ();
			public ulong get_webkit_dropped_frame_count ();
			public bool get_webkit_supports_fullscreen ();
			public bool get_webkit_wireless_video_playback_disabled ();
			public ulong get_width ();
			public void set_height (ulong value);
			public void set_poster (string value);
			public void set_webkit_wireless_video_playback_disabled (bool value);
			public void set_width (ulong value);
			public void webkit_enter_full_screen () throws GLib.Error;
			public void webkit_enter_fullscreen () throws GLib.Error;
			public void webkit_exit_full_screen ();
			public void webkit_exit_fullscreen ();
			public ulong height { get; set; }
			public string poster { owned get; set; }
			public ulong video_height { get; }
			public ulong video_width { get; }
			public ulong webkit_decoded_frame_count { get; }
			public bool webkit_displaying_fullscreen { get; }
			public ulong webkit_dropped_frame_count { get; }
			public bool webkit_supports_fullscreen { get; }
			public bool webkit_wireless_video_playback_disabled { get; set; }
			public ulong width { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_history_get_type ()")]
		[GIR (name = "DOMHistory")]
		public class History : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected History ();
			public void back ();
			public void forward ();
			public ulong get_length ();
			public void go (long distance);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_keyboard_event_get_type ()")]
		[GIR (name = "DOMKeyboardEvent")]
		public class KeyboardEvent : WebKit.DOM.UIEvent {
			[CCode (has_construct_function = false)]
			protected KeyboardEvent ();
			public bool get_alt_graph_key ();
			public bool get_alt_key ();
			public bool get_ctrl_key ();
			public string get_key_identifier ();
			public ulong get_key_location ();
			public bool get_meta_key ();
			public bool get_modifier_state (string keyIdentifierArg);
			public bool get_shift_key ();
			public void init_keyboard_event (string type, bool canBubble, bool cancelable, WebKit.DOM.DOMWindow view, string keyIdentifier, ulong location, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey, bool altGraphKey);
			public bool alt_graph_key { get; }
			public bool alt_key { get; }
			public bool ctrl_key { get; }
			public string key_identifier { owned get; }
			public ulong key_location { get; }
			public bool meta_key { get; }
			public bool shift_key { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_location_get_type ()")]
		[GIR (name = "DOMLocation")]
		public class Location : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Location ();
			public unowned WebKit.DOM.DOMStringList get_ancestor_origins ();
			public string get_hash ();
			public string get_host ();
			public string get_hostname ();
			public string get_href ();
			public string get_origin ();
			public string get_pathname ();
			public string get_port ();
			public string get_protocol ();
			public string get_search ();
			public WebKit.DOM.DOMStringList ancestor_origins { get; }
			public string hash { owned get; }
			public string host { owned get; }
			public string hostname { owned get; }
			public string href { owned get; }
			public string origin { owned get; }
			public string pathname { owned get; }
			public string port { owned get; }
			public string protocol { owned get; }
			public string search { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_media_controller_get_type ()")]
		[GIR (name = "DOMMediaController")]
		public class MediaController : WebKit.DOM.Object, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected MediaController ();
			public unowned WebKit.DOM.TimeRanges get_buffered ();
			public double get_current_time ();
			public double get_default_playback_rate ();
			public double get_duration ();
			public bool get_muted ();
			public bool get_paused ();
			public double get_playback_rate ();
			public string get_playback_state ();
			public unowned WebKit.DOM.TimeRanges get_played ();
			public unowned WebKit.DOM.TimeRanges get_seekable ();
			public double get_volume ();
			public void pause ();
			public void play ();
			public void set_current_time (double value);
			public void set_default_playback_rate (double value);
			public void set_muted (bool value);
			public void set_playback_rate (double value);
			public void set_volume (double value) throws GLib.Error;
			public void unpause ();
			public WebKit.DOM.TimeRanges buffered { get; }
			public double current_time { get; set; }
			public double default_playback_rate { get; set; }
			public double duration { get; }
			public bool muted { get; set; }
			public bool paused { get; }
			public double playback_rate { get; set; }
			public string playback_state { owned get; }
			public WebKit.DOM.TimeRanges played { get; }
			public WebKit.DOM.TimeRanges seekable { get; }
			public double volume { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_media_error_get_type ()")]
		[GIR (name = "DOMMediaError")]
		public class MediaError : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected MediaError ();
			public ushort get_code ();
			public uint code { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_media_list_get_type ()")]
		[GIR (name = "DOMMediaList")]
		public class MediaList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected MediaList ();
			public void append_medium (string newMedium) throws GLib.Error;
			public void delete_medium (string oldMedium) throws GLib.Error;
			public ulong get_length ();
			public string get_media_text ();
			public string item (ulong index);
			public void set_media_text (string value) throws GLib.Error;
			public ulong length { get; }
			public string media_text { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_media_query_list_get_type ()")]
		[GIR (name = "DOMMediaQueryList")]
		public class MediaQueryList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected MediaQueryList ();
			public bool get_matches ();
			public string get_media ();
			public bool matches { get; }
			public string media { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_memory_info_get_type ()")]
		[GIR (name = "DOMMemoryInfo")]
		public class MemoryInfo : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected MemoryInfo ();
			[Deprecated (since = "2.2")]
			public static ulong get_js_heap_size_limit (void* self);
			[Deprecated (since = "2.2")]
			public static ulong get_total_js_heap_size (void* self);
			[Deprecated (since = "2.2")]
			public static ulong get_used_js_heap_size (void* self);
			[NoAccessorMethod]
			public ulong js_heap_size_limit { get; }
			[NoAccessorMethod]
			public ulong total_js_heap_size { get; }
			[NoAccessorMethod]
			public ulong used_js_heap_size { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_message_port_get_type ()")]
		[GIR (name = "DOMMessagePort")]
		public class MessagePort : WebKit.DOM.Object, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected MessagePort ();
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_micro_data_item_value_get_type ()")]
		[GIR (name = "DOMMicroDataItemValue")]
		public class MicroDataItemValue : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected MicroDataItemValue ();
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_mouse_event_get_type ()")]
		[GIR (name = "DOMMouseEvent")]
		public class MouseEvent : WebKit.DOM.UIEvent {
			[CCode (has_construct_function = false)]
			protected MouseEvent ();
			public bool get_alt_key ();
			public ushort get_button ();
			public long get_client_x ();
			public long get_client_y ();
			public bool get_ctrl_key ();
			public unowned WebKit.DOM.Node get_from_element ();
			public bool get_meta_key ();
			public long get_offset_x ();
			public long get_offset_y ();
			public unowned WebKit.DOM.EventTarget get_related_target ();
			public long get_screen_x ();
			public long get_screen_y ();
			public bool get_shift_key ();
			public unowned WebKit.DOM.Node get_to_element ();
			public long get_webkit_movement_x ();
			public long get_webkit_movement_y ();
			public long get_x ();
			public long get_y ();
			public void init_mouse_event (string type, bool canBubble, bool cancelable, WebKit.DOM.DOMWindow view, long detail, long screenX, long screenY, long clientX, long clientY, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey, ushort button, WebKit.DOM.EventTarget relatedTarget);
			public bool alt_key { get; }
			public uint button { get; }
			public long client_x { get; }
			public long client_y { get; }
			public bool ctrl_key { get; }
			public WebKit.DOM.Node from_element { get; }
			public bool meta_key { get; }
			public long offset_x { get; }
			public long offset_y { get; }
			public WebKit.DOM.EventTarget related_target { get; }
			public long screen_x { get; }
			public long screen_y { get; }
			public bool shift_key { get; }
			public WebKit.DOM.Node to_element { get; }
			public long webkit_movement_x { get; }
			public long webkit_movement_y { get; }
			public long x { get; }
			public long y { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_named_node_map_get_type ()")]
		[GIR (name = "DOMNamedNodeMap")]
		public class NamedNodeMap : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected NamedNodeMap ();
			public ulong get_length ();
			public unowned WebKit.DOM.Node get_named_item (string name);
			public unowned WebKit.DOM.Node get_named_item_ns (string namespaceURI, string localName);
			public unowned WebKit.DOM.Node item (ulong index);
			public unowned WebKit.DOM.Node remove_named_item (string name) throws GLib.Error;
			public unowned WebKit.DOM.Node remove_named_item_ns (string namespaceURI, string localName) throws GLib.Error;
			public unowned WebKit.DOM.Node set_named_item (WebKit.DOM.Node node) throws GLib.Error;
			public unowned WebKit.DOM.Node set_named_item_ns (WebKit.DOM.Node node) throws GLib.Error;
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_navigator_get_type ()")]
		[GIR (name = "DOMNavigator")]
		public class Navigator : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Navigator ();
			public string get_app_code_name ();
			public string get_app_name ();
			public string get_app_version ();
			public bool get_cookie_enabled ();
			public unowned WebKit.DOM.Geolocation get_geolocation ();
			public string get_language ();
			public unowned WebKit.DOM.DOMMimeTypeArray get_mime_types ();
			public bool get_on_line ();
			public string get_platform ();
			public unowned WebKit.DOM.DOMPluginArray get_plugins ();
			public string get_product ();
			public string get_product_sub ();
			public void get_storage_updates ();
			public string get_user_agent ();
			public string get_vendor ();
			public string get_vendor_sub ();
			public unowned WebKit.DOM.BatteryManager get_webkit_battery ();
			public unowned WebKit.DOM.StorageQuota get_webkit_persistent_storage ();
			public unowned WebKit.DOM.StorageQuota get_webkit_temporary_storage ();
			public string is_protocol_handler_registered (string scheme, string url) throws GLib.Error;
			public bool java_enabled ();
			public void register_protocol_handler (string scheme, string url, string title) throws GLib.Error;
			public void unregister_protocol_handler (string scheme, string url) throws GLib.Error;
			public unowned WebKit.DOM.GamepadList webkit_get_gamepads ();
			public string app_code_name { owned get; }
			public string app_name { owned get; }
			public string app_version { owned get; }
			public bool cookie_enabled { get; }
			public WebKit.DOM.Geolocation geolocation { get; }
			public string language { owned get; }
			public WebKit.DOM.DOMMimeTypeArray mime_types { get; }
			public bool on_line { get; }
			public string platform { owned get; }
			public WebKit.DOM.DOMPluginArray plugins { get; }
			public string product { owned get; }
			public string product_sub { owned get; }
			public string user_agent { owned get; }
			public string vendor { owned get; }
			public string vendor_sub { owned get; }
			public WebKit.DOM.BatteryManager webkit_battery { get; }
			public WebKit.DOM.StorageQuota webkit_persistent_storage { get; }
			public WebKit.DOM.StorageQuota webkit_temporary_storage { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_node_get_type ()")]
		[GIR (name = "DOMNode")]
		public class Node : WebKit.DOM.Object, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected Node ();
			public unowned WebKit.DOM.Node append_child (WebKit.DOM.Node newChild) throws GLib.Error;
			public unowned WebKit.DOM.Node clone_node (bool deep);
			public ushort compare_document_position (WebKit.DOM.Node other);
			public bool contains (WebKit.DOM.Node other);
			[Deprecated (since = "2.2")]
			public unowned WebKit.DOM.NamedNodeMap get_attributes ();
			public string get_base_uri ();
			public unowned WebKit.DOM.NodeList get_child_nodes ();
			public unowned WebKit.DOM.Node get_first_child ();
			public unowned WebKit.DOM.Node get_last_child ();
			public string get_local_name ();
			public string get_namespace_uri ();
			public unowned WebKit.DOM.Node get_next_sibling ();
			public string get_node_name ();
			public ushort get_node_type ();
			public string get_node_value ();
			public unowned WebKit.DOM.Document get_owner_document ();
			public unowned WebKit.DOM.Element get_parent_element ();
			public unowned WebKit.DOM.Node get_parent_node ();
			public string get_prefix ();
			public unowned WebKit.DOM.Node get_previous_sibling ();
			public string get_text_content ();
			[Deprecated (since = "2.2")]
			public bool has_attributes ();
			public bool has_child_nodes ();
			public unowned WebKit.DOM.Node insert_before (WebKit.DOM.Node newChild, WebKit.DOM.Node? refChild) throws GLib.Error;
			public bool is_default_namespace (string namespaceURI);
			public bool is_equal_node (WebKit.DOM.Node other);
			public bool is_same_node (WebKit.DOM.Node other);
			public bool is_supported (string feature, string version);
			public string lookup_namespace_uri (string prefix);
			public string lookup_prefix (string namespaceURI);
			public void normalize ();
			public unowned WebKit.DOM.Node remove_child (WebKit.DOM.Node oldChild) throws GLib.Error;
			public unowned WebKit.DOM.Node replace_child (WebKit.DOM.Node newChild, WebKit.DOM.Node oldChild) throws GLib.Error;
			public void set_node_value (string value) throws GLib.Error;
			public void set_prefix (string value) throws GLib.Error;
			public void set_text_content (string value) throws GLib.Error;
			public string base_uri { owned get; }
			public WebKit.DOM.NodeList child_nodes { get; }
			public WebKit.DOM.Node first_child { get; }
			public WebKit.DOM.Node last_child { get; }
			public string local_name { owned get; }
			public string namespace_uri { owned get; }
			public WebKit.DOM.Node next_sibling { get; }
			public string node_name { owned get; }
			public uint node_type { get; }
			public string node_value { owned get; set; }
			public WebKit.DOM.Document owner_document { get; }
			public WebKit.DOM.Element parent_element { get; }
			public WebKit.DOM.Node parent_node { get; }
			public string prefix { owned get; set; }
			public WebKit.DOM.Node previous_sibling { get; }
			public string text_content { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_node_filter_get_type ()")]
		[GIR (name = "DOMNodeFilter")]
		public class NodeFilter : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected NodeFilter ();
			public short accept_node (WebKit.DOM.Node n);
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_node_iterator_get_type ()")]
		[GIR (name = "DOMNodeIterator")]
		public class NodeIterator : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected NodeIterator ();
			public void detach ();
			public bool get_expand_entity_references ();
			public unowned WebKit.DOM.NodeFilter get_filter ();
			public bool get_pointer_before_reference_node ();
			public unowned WebKit.DOM.Node get_reference_node ();
			public unowned WebKit.DOM.Node get_root ();
			public ulong get_what_to_show ();
			public unowned WebKit.DOM.Node next_node () throws GLib.Error;
			public unowned WebKit.DOM.Node previous_node () throws GLib.Error;
			public bool expand_entity_references { get; }
			public WebKit.DOM.NodeFilter filter { get; }
			public bool pointer_before_reference_node { get; }
			public WebKit.DOM.Node reference_node { get; }
			public WebKit.DOM.Node root { get; }
			public ulong what_to_show { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_node_list_get_type ()")]
		[GIR (name = "DOMNodeList")]
		public class NodeList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected NodeList ();
			public ulong get_length ();
			public unowned WebKit.DOM.Node item (ulong index);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_object_get_type ()")]
		[GIR (name = "DOMObject")]
		public class Object : GLib.Object {
			public void* coreObject;
			[CCode (has_construct_function = false)]
			protected Object ();
			public void* core_object { construct; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_performance_get_type ()")]
		[GIR (name = "DOMPerformance")]
		public class Performance : WebKit.DOM.Object, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected Performance ();
			[Deprecated (since = "2.2")]
			public void* get_memory ();
			public unowned WebKit.DOM.PerformanceNavigation get_navigation ();
			public unowned WebKit.DOM.PerformanceTiming get_timing ();
			public double now ();
			public WebKit.DOM.PerformanceNavigation navigation { get; }
			public WebKit.DOM.PerformanceTiming timing { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_performance_entry_get_type ()")]
		[GIR (name = "DOMPerformanceEntry")]
		public class PerformanceEntry : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected PerformanceEntry ();
			public double get_duration ();
			public string get_entry_type ();
			public string get_name ();
			public double get_start_time ();
			public double duration { get; }
			public string entry_type { owned get; }
			public string name { owned get; }
			public double start_time { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_performance_entry_list_get_type ()")]
		[GIR (name = "DOMPerformanceEntryList")]
		public class PerformanceEntryList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected PerformanceEntryList ();
			public ulong get_length ();
			public unowned WebKit.DOM.PerformanceEntry item (ulong index);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_performance_navigation_get_type ()")]
		[GIR (name = "DOMPerformanceNavigation")]
		public class PerformanceNavigation : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected PerformanceNavigation ();
			public ushort get_redirect_count ();
			public uint redirect_count { get; }
			[NoAccessorMethod]
			public uint type { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_performance_timing_get_type ()")]
		[GIR (name = "DOMPerformanceTiming")]
		public class PerformanceTiming : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected PerformanceTiming ();
			public uint64 get_connect_end ();
			public uint64 get_connect_start ();
			public uint64 get_dom_complete ();
			public uint64 get_dom_content_loaded_event_end ();
			public uint64 get_dom_content_loaded_event_start ();
			public uint64 get_dom_interactive ();
			public uint64 get_dom_loading ();
			public uint64 get_domain_lookup_end ();
			public uint64 get_domain_lookup_start ();
			public uint64 get_fetch_start ();
			public uint64 get_load_event_end ();
			public uint64 get_load_event_start ();
			public uint64 get_navigation_start ();
			public uint64 get_redirect_end ();
			public uint64 get_redirect_start ();
			public uint64 get_request_start ();
			public uint64 get_response_end ();
			public uint64 get_response_start ();
			public uint64 get_secure_connection_start ();
			public uint64 get_unload_event_end ();
			public uint64 get_unload_event_start ();
			public uint64 connect_end { get; }
			public uint64 connect_start { get; }
			public uint64 dom_complete { get; }
			public uint64 dom_content_loaded_event_end { get; }
			public uint64 dom_content_loaded_event_start { get; }
			public uint64 dom_interactive { get; }
			public uint64 dom_loading { get; }
			public uint64 domain_lookup_end { get; }
			public uint64 domain_lookup_start { get; }
			public uint64 fetch_start { get; }
			public uint64 load_event_end { get; }
			public uint64 load_event_start { get; }
			public uint64 navigation_start { get; }
			public uint64 redirect_end { get; }
			public uint64 redirect_start { get; }
			public uint64 request_start { get; }
			public uint64 response_end { get; }
			public uint64 response_start { get; }
			public uint64 secure_connection_start { get; }
			public uint64 unload_event_end { get; }
			public uint64 unload_event_start { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_processing_instruction_get_type ()")]
		[GIR (name = "DOMProcessingInstruction")]
		public class ProcessingInstruction : WebKit.DOM.CharacterData, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected ProcessingInstruction ();
			[Deprecated (since = "2.4")]
			public string get_data ();
			public unowned WebKit.DOM.StyleSheet get_sheet ();
			public string get_target ();
			[Deprecated (since = "2.4")]
			public void set_data (string value) throws GLib.Error;
			public WebKit.DOM.StyleSheet sheet { get; }
			public string target { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_property_node_list_get_type ()")]
		[GIR (name = "DOMPropertyNodeList")]
		public class PropertyNodeList : WebKit.DOM.NodeList {
			[CCode (has_construct_function = false)]
			protected PropertyNodeList ();
			[Deprecated (since = "2.2")]
			public static ulong get_length (void* self);
			[Deprecated (since = "2.2")]
			public static unowned WebKit.DOM.Node item (void* self, ulong index);
			[NoAccessorMethod]
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_range_get_type ()")]
		[GIR (name = "DOMRange")]
		public class Range : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Range ();
			public unowned WebKit.DOM.DocumentFragment clone_contents () throws GLib.Error;
			public unowned WebKit.DOM.Range clone_range () throws GLib.Error;
			public void collapse (bool toStart) throws GLib.Error;
			public short compare_boundary_points (ushort how, WebKit.DOM.Range sourceRange) throws GLib.Error;
			public short compare_node (WebKit.DOM.Node refNode) throws GLib.Error;
			public short compare_point (WebKit.DOM.Node refNode, long offset) throws GLib.Error;
			public unowned WebKit.DOM.DocumentFragment create_contextual_fragment (string html) throws GLib.Error;
			public void delete_contents () throws GLib.Error;
			public void detach () throws GLib.Error;
			public void expand (string unit) throws GLib.Error;
			public unowned WebKit.DOM.DocumentFragment extract_contents () throws GLib.Error;
			public bool get_collapsed () throws GLib.Error;
			public unowned WebKit.DOM.Node get_common_ancestor_container () throws GLib.Error;
			public unowned WebKit.DOM.Node get_end_container () throws GLib.Error;
			public long get_end_offset () throws GLib.Error;
			public unowned WebKit.DOM.Node get_start_container () throws GLib.Error;
			public long get_start_offset () throws GLib.Error;
			public string get_text ();
			public void insert_node (WebKit.DOM.Node newNode) throws GLib.Error;
			public bool intersects_node (WebKit.DOM.Node refNode) throws GLib.Error;
			public bool is_point_in_range (WebKit.DOM.Node refNode, long offset) throws GLib.Error;
			public void select_node (WebKit.DOM.Node refNode) throws GLib.Error;
			public void select_node_contents (WebKit.DOM.Node refNode) throws GLib.Error;
			public void set_end (WebKit.DOM.Node refNode, long offset) throws GLib.Error;
			public void set_end_after (WebKit.DOM.Node refNode) throws GLib.Error;
			public void set_end_before (WebKit.DOM.Node refNode) throws GLib.Error;
			public void set_start (WebKit.DOM.Node refNode, long offset) throws GLib.Error;
			public void set_start_after (WebKit.DOM.Node refNode) throws GLib.Error;
			public void set_start_before (WebKit.DOM.Node refNode) throws GLib.Error;
			public void surround_contents (WebKit.DOM.Node newParent) throws GLib.Error;
			public string to_string () throws GLib.Error;
			public bool collapsed { get; }
			public WebKit.DOM.Node common_ancestor_container { get; }
			public WebKit.DOM.Node end_container { get; }
			public long end_offset { get; }
			public WebKit.DOM.Node start_container { get; }
			public long start_offset { get; }
			public string text { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_screen_get_type ()")]
		[GIR (name = "DOMScreen")]
		public class Screen : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Screen ();
			public ulong get_avail_height ();
			public long get_avail_left ();
			public long get_avail_top ();
			public ulong get_avail_width ();
			public ulong get_color_depth ();
			public ulong get_height ();
			public ulong get_pixel_depth ();
			public ulong get_width ();
			public ulong avail_height { get; }
			public long avail_left { get; }
			public long avail_top { get; }
			public ulong avail_width { get; }
			public ulong color_depth { get; }
			public ulong height { get; }
			public ulong pixel_depth { get; }
			public ulong width { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_shadow_root_get_type ()")]
		[GIR (name = "DOMShadowRoot")]
		public class ShadowRoot : WebKit.DOM.DocumentFragment, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected ShadowRoot ();
			public unowned WebKit.DOM.Element element_from_point (long x, long y);
			public unowned WebKit.DOM.Element get_active_element ();
			public bool get_apply_author_styles ();
			public unowned WebKit.DOM.Element get_element_by_id (string elementId);
			public unowned WebKit.DOM.NodeList get_elements_by_class_name (string className);
			public unowned WebKit.DOM.NodeList get_elements_by_tag_name (string tagName);
			public unowned WebKit.DOM.NodeList get_elements_by_tag_name_ns (string namespaceURI, string localName);
			public string get_inner_html ();
			public bool get_reset_style_inheritance ();
			public unowned WebKit.DOM.DOMSelection get_selection ();
			public void set_apply_author_styles (bool value);
			public void set_inner_html (string value) throws GLib.Error;
			public void set_reset_style_inheritance (bool value);
			public WebKit.DOM.Element active_element { get; }
			public bool apply_author_styles { get; set; }
			public string inner_html { owned get; set; }
			public bool reset_style_inheritance { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_storage_get_type ()")]
		[GIR (name = "DOMStorage")]
		public class Storage : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Storage ();
			public void clear () throws GLib.Error;
			public string get_item (string key) throws GLib.Error;
			public ulong get_length () throws GLib.Error;
			public string key (ulong index) throws GLib.Error;
			public void remove_item (string key) throws GLib.Error;
			public void set_item (string key, string data) throws GLib.Error;
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_storage_info_get_type ()")]
		[GIR (name = "DOMStorageInfo")]
		public class StorageInfo : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected StorageInfo ();
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_storage_quota_get_type ()")]
		[GIR (name = "DOMStorageQuota")]
		public class StorageQuota : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected StorageQuota ();
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_style_media_get_type ()")]
		[GIR (name = "DOMStyleMedia")]
		public class StyleMedia : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected StyleMedia ();
			public bool match_medium (string mediaquery);
			[NoAccessorMethod]
			public string type { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_style_sheet_get_type ()")]
		[GIR (name = "DOMStyleSheet")]
		public class StyleSheet : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected StyleSheet ();
			public bool get_disabled ();
			public string get_href ();
			public unowned WebKit.DOM.MediaList get_media ();
			public unowned WebKit.DOM.Node get_owner_node ();
			public unowned WebKit.DOM.StyleSheet get_parent_style_sheet ();
			public string get_title ();
			public void set_disabled (bool value);
			public bool disabled { get; set; }
			public string href { owned get; }
			public WebKit.DOM.MediaList media { get; }
			public WebKit.DOM.Node owner_node { get; }
			public WebKit.DOM.StyleSheet parent_style_sheet { get; }
			public string title { owned get; }
			[NoAccessorMethod]
			public string type { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_style_sheet_list_get_type ()")]
		[GIR (name = "DOMStyleSheetList")]
		public class StyleSheetList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected StyleSheetList ();
			public ulong get_length ();
			public unowned WebKit.DOM.StyleSheet item (ulong index);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_text_get_type ()")]
		[GIR (name = "DOMText")]
		public class Text : WebKit.DOM.CharacterData, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected Text ();
			public string get_whole_text ();
			public unowned WebKit.DOM.Text replace_whole_text (string content) throws GLib.Error;
			public unowned WebKit.DOM.Text split_text (ulong offset) throws GLib.Error;
			public string whole_text { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_text_track_get_type ()")]
		[GIR (name = "DOMTextTrack")]
		public class TextTrack : WebKit.DOM.Object, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected TextTrack ();
			public void add_cue (WebKit.DOM.TextTrackCue cue);
			public unowned WebKit.DOM.TextTrackCueList get_active_cues ();
			public unowned WebKit.DOM.TextTrackCueList get_cues ();
			public string get_id ();
			public string get_kind ();
			public string get_label ();
			public string get_language ();
			public string get_mode ();
			public void remove_cue (WebKit.DOM.TextTrackCue cue) throws GLib.Error;
			public void set_mode (string value);
			public WebKit.DOM.TextTrackCueList active_cues { get; }
			public WebKit.DOM.TextTrackCueList cues { get; }
			public string id { owned get; }
			public string kind { owned get; }
			public string label { owned get; }
			public string language { owned get; }
			public string mode { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_text_track_cue_get_type ()")]
		[GIR (name = "DOMTextTrackCue")]
		public class TextTrackCue : WebKit.DOM.Object, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected TextTrackCue ();
			public string get_align ();
			public unowned WebKit.DOM.DocumentFragment get_cue_as_html ();
			public double get_end_time ();
			public string get_id ();
			public long get_line ();
			public bool get_pause_on_exit ();
			public long get_position ();
			public long get_size ();
			public bool get_snap_to_lines ();
			public double get_start_time ();
			public string get_text ();
			public unowned WebKit.DOM.TextTrack get_track ();
			public string get_vertical ();
			public void set_align (string value) throws GLib.Error;
			public void set_end_time (double value) throws GLib.Error;
			public void set_id (string value);
			public void set_line (long value) throws GLib.Error;
			public void set_pause_on_exit (bool value);
			public void set_position (long value) throws GLib.Error;
			public void set_size (long value) throws GLib.Error;
			public void set_snap_to_lines (bool value);
			public void set_start_time (double value) throws GLib.Error;
			public void set_text (string value);
			public void set_vertical (string value) throws GLib.Error;
			public string align { owned get; set; }
			public double end_time { get; set; }
			public string id { owned get; set; }
			public long line { get; set; }
			public bool pause_on_exit { get; set; }
			public long position { get; set; }
			public long size { get; set; }
			public bool snap_to_lines { get; set; }
			public double start_time { get; set; }
			public string text { owned get; set; }
			public WebKit.DOM.TextTrack track { get; }
			public string vertical { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_text_track_cue_list_get_type ()")]
		[GIR (name = "DOMTextTrackCueList")]
		public class TextTrackCueList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected TextTrackCueList ();
			public unowned WebKit.DOM.TextTrackCue get_cue_by_id (string id);
			public ulong get_length ();
			public unowned WebKit.DOM.TextTrackCue item (ulong index);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_text_track_list_get_type ()")]
		[GIR (name = "DOMTextTrackList")]
		public class TextTrackList : WebKit.DOM.Object, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected TextTrackList ();
			public ulong get_length ();
			public unowned WebKit.DOM.TextTrack get_track_by_id (string id);
			public unowned WebKit.DOM.TextTrack item (ulong index);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_time_ranges_get_type ()")]
		[GIR (name = "DOMTimeRanges")]
		public class TimeRanges : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected TimeRanges ();
			public double end (ulong index) throws GLib.Error;
			public ulong get_length ();
			public double start (ulong index) throws GLib.Error;
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_touch_get_type ()")]
		[GIR (name = "DOMTouch")]
		public class Touch : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Touch ();
			public long get_client_x ();
			public long get_client_y ();
			public ulong get_identifier ();
			public long get_page_x ();
			public long get_page_y ();
			public long get_screen_x ();
			public long get_screen_y ();
			public unowned WebKit.DOM.EventTarget get_target ();
			public float get_webkit_force ();
			public long get_webkit_radius_x ();
			public long get_webkit_radius_y ();
			public float get_webkit_rotation_angle ();
			public long client_x { get; }
			public long client_y { get; }
			public ulong identifier { get; }
			public long page_x { get; }
			public long page_y { get; }
			public long screen_x { get; }
			public long screen_y { get; }
			public WebKit.DOM.EventTarget target { get; }
			public float webkit_force { get; }
			public long webkit_radius_x { get; }
			public long webkit_radius_y { get; }
			public float webkit_rotation_angle { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_track_event_get_type ()")]
		[GIR (name = "DOMTrackEvent")]
		public class TrackEvent : WebKit.DOM.Event {
			[CCode (has_construct_function = false)]
			protected TrackEvent ();
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_tree_walker_get_type ()")]
		[GIR (name = "DOMTreeWalker")]
		public class TreeWalker : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected TreeWalker ();
			public unowned WebKit.DOM.Node first_child ();
			public unowned WebKit.DOM.Node get_current_node ();
			public bool get_expand_entity_references ();
			public unowned WebKit.DOM.NodeFilter get_filter ();
			public unowned WebKit.DOM.Node get_root ();
			public ulong get_what_to_show ();
			public unowned WebKit.DOM.Node last_child ();
			public unowned WebKit.DOM.Node next_node ();
			public unowned WebKit.DOM.Node next_sibling ();
			public unowned WebKit.DOM.Node parent_node ();
			public unowned WebKit.DOM.Node previous_node ();
			public unowned WebKit.DOM.Node previous_sibling ();
			public void set_current_node (WebKit.DOM.Node value) throws GLib.Error;
			public WebKit.DOM.Node current_node { get; }
			public bool expand_entity_references { get; }
			public WebKit.DOM.NodeFilter filter { get; }
			public WebKit.DOM.Node root { get; }
			public ulong what_to_show { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_ui_event_get_type ()")]
		[GIR (name = "DOMUIEvent")]
		public class UIEvent : WebKit.DOM.Event {
			[CCode (has_construct_function = false)]
			protected UIEvent ();
			public long get_char_code ();
			public long get_detail ();
			public long get_key_code ();
			public long get_layer_x ();
			public long get_layer_y ();
			public long get_page_x ();
			public long get_page_y ();
			public unowned WebKit.DOM.DOMWindow get_view ();
			public long get_which ();
			public void init_ui_event (string type, bool canBubble, bool cancelable, WebKit.DOM.DOMWindow view, long detail);
			public long char_code { get; }
			public long detail { get; }
			public long key_code { get; }
			public long layer_x { get; }
			public long layer_y { get; }
			public long page_x { get; }
			public long page_y { get; }
			public WebKit.DOM.DOMWindow view { get; }
			public long which { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_validity_state_get_type ()")]
		[GIR (name = "DOMValidityState")]
		public class ValidityState : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected ValidityState ();
			public bool get_bad_input ();
			public bool get_custom_error ();
			public bool get_pattern_mismatch ();
			public bool get_range_overflow ();
			public bool get_range_underflow ();
			public bool get_step_mismatch ();
			public bool get_too_long ();
			public bool get_type_mismatch ();
			public bool get_valid ();
			public bool get_value_missing ();
			public bool bad_input { get; }
			public bool custom_error { get; }
			public bool pattern_mismatch { get; }
			public bool range_overflow { get; }
			public bool range_underflow { get; }
			public bool step_mismatch { get; }
			public bool too_long { get; }
			public bool type_mismatch { get; }
			public bool valid { get; }
			public bool value_missing { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_video_playback_quality_get_type ()")]
		[GIR (name = "DOMVideoPlaybackQuality")]
		public class VideoPlaybackQuality : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected VideoPlaybackQuality ();
			public ulong get_corrupted_video_frames ();
			public double get_creation_time ();
			public ulong get_dropped_video_frames ();
			public double get_total_frame_delay ();
			public ulong get_total_video_frames ();
			public ulong corrupted_video_frames { get; }
			public double creation_time { get; }
			public ulong dropped_video_frames { get; }
			public double total_frame_delay { get; }
			public ulong total_video_frames { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_video_track_get_type ()")]
		[GIR (name = "DOMVideoTrack")]
		public class VideoTrack : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected VideoTrack ();
			public string get_id ();
			public string get_kind ();
			public string get_label ();
			public string get_language ();
			public bool get_selected ();
			public void set_selected (bool value);
			public string id { owned get; }
			public string kind { owned get; }
			public string label { owned get; }
			public string language { owned get; }
			public bool selected { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_video_track_list_get_type ()")]
		[GIR (name = "DOMVideoTrackList")]
		public class VideoTrackList : WebKit.DOM.Object, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected VideoTrackList ();
			public ulong get_length ();
			public unowned WebKit.DOM.VideoTrack get_track_by_id (string id);
			public unowned WebKit.DOM.VideoTrack item (ulong index);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", lower_case_cprefix = "webkit_dom_webkit_named_flow_", type_id = "webkit_dom_webkit_named_flow_get_type ()")]
		[GIR (name = "DOMWebKitNamedFlow")]
		public class WebKitNamedFlow : WebKit.DOM.Object, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected WebKitNamedFlow ();
			public unowned WebKit.DOM.NodeList get_content ();
			[Deprecated (since = "1.10")]
			public unowned WebKit.DOM.NodeList get_content_nodes ();
			public long get_first_empty_region_index ();
			public string get_name ();
			[Deprecated (since = "1.10")]
			public bool get_overflow ();
			public bool get_overset ();
			public unowned WebKit.DOM.NodeList get_regions ();
			public unowned WebKit.DOM.NodeList get_regions_by_content (WebKit.DOM.Node contentNode);
			[Deprecated (since = "1.10")]
			public unowned WebKit.DOM.NodeList get_regions_by_content_node (WebKit.DOM.Node content_node);
			public long first_empty_region_index { get; }
			public string name { owned get; }
			public bool overset { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", lower_case_cprefix = "webkit_dom_webkit_point_", type_id = "webkit_dom_webkit_point_get_type ()")]
		[GIR (name = "DOMWebKitPoint")]
		public class WebKitPoint : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected WebKitPoint ();
			public float get_x ();
			public float get_y ();
			public void set_x (float value);
			public void set_y (float value);
			public float x { get; set; }
			public float y { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_wheel_event_get_type ()")]
		[GIR (name = "DOMWheelEvent")]
		public class WheelEvent : WebKit.DOM.MouseEvent {
			[CCode (has_construct_function = false)]
			protected WheelEvent ();
			public ulong get_delta_mode ();
			public double get_delta_x ();
			public double get_delta_y ();
			public double get_delta_z ();
			public bool get_webkit_direction_inverted_from_device ();
			public long get_wheel_delta ();
			public long get_wheel_delta_x ();
			public long get_wheel_delta_y ();
			public void init_wheel_event (long wheelDeltaX, long wheelDeltaY, WebKit.DOM.DOMWindow view, long screenX, long screenY, long clientX, long clientY, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey);
			public ulong delta_mode { get; }
			public double delta_x { get; }
			public double delta_y { get; }
			public double delta_z { get; }
			public bool webkit_direction_inverted_from_device { get; }
			public long wheel_delta { get; }
			public long wheel_delta_x { get; }
			public long wheel_delta_y { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_xpath_expression_get_type ()")]
		[GIR (name = "DOMXPathExpression")]
		public class XPathExpression : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected XPathExpression ();
			public unowned WebKit.DOM.XPathResult evaluate (WebKit.DOM.Node contextNode, ushort type, WebKit.DOM.XPathResult inResult) throws GLib.Error;
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_xpath_ns_resolver_get_type ()")]
		[GIR (name = "DOMXPathNSResolver")]
		public class XPathNSResolver : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected XPathNSResolver ();
			public string lookup_namespace_uri (string prefix);
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_xpath_result_get_type ()")]
		[GIR (name = "DOMXPathResult")]
		public class XPathResult : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected XPathResult ();
			public bool get_boolean_value () throws GLib.Error;
			public bool get_invalid_iterator_state ();
			public double get_number_value () throws GLib.Error;
			public ushort get_result_type ();
			public unowned WebKit.DOM.Node get_single_node_value () throws GLib.Error;
			public ulong get_snapshot_length () throws GLib.Error;
			public string get_string_value () throws GLib.Error;
			public unowned WebKit.DOM.Node iterate_next () throws GLib.Error;
			public unowned WebKit.DOM.Node snapshot_item (ulong index) throws GLib.Error;
			public bool boolean_value { get; }
			public bool invalid_iterator_state { get; }
			public double number_value { get; }
			public uint result_type { get; }
			public WebKit.DOM.Node single_node_value { get; }
			public ulong snapshot_length { get; }
			public string string_value { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_event_target_get_type ()")]
		[GIR (name = "DOMEventTarget")]
		public interface EventTarget : GLib.Object {
			public bool add_event_listener_with_closure (string event_name, [CCode (type = "GClosure*")] owned WebKit.DOM.EventTargetFunc handler, bool use_capture);
			public abstract bool dispatch_event (WebKit.DOM.Event event) throws GLib.Error;
			public abstract bool remove_event_listener (string event_name, GLib.Closure handler, bool use_capture);
			public bool remove_event_listener_with_closure (string event_name, [CCode (type = "GClosure*")] owned WebKit.DOM.EventTargetFunc handler, bool use_capture);
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h")]
		public delegate void EventTargetFunc (WebKit.DOM.EventTarget target, WebKit.DOM.Event event);
	}
	[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_frame_get_type ()")]
	public class Frame : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Frame ();
		public void* get_javascript_context_for_script_world (WebKit.ScriptWorld world);
		public void* get_javascript_global_context ();
		public unowned string get_uri ();
		public bool is_main_frame ();
	}
	[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_script_world_get_type ()")]
	public class ScriptWorld : GLib.Object {
		[CCode (has_construct_function = false)]
		public ScriptWorld ();
		public static unowned WebKit.ScriptWorld get_default ();
		public signal void window_object_cleared (WebKit.WebPage page, WebKit.Frame frame);
	}
	[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_uri_request_get_type ()")]
	public class URIRequest : GLib.Object {
		[CCode (has_construct_function = false)]
		public URIRequest (string uri);
		public unowned string get_uri ();
		public void set_uri (string uri);
		public string uri { get; set construct; }
	}
	[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_uri_response_get_type ()")]
	public class URIResponse : GLib.Object {
		[CCode (has_construct_function = false)]
		protected URIResponse ();
		public uint64 get_content_length ();
		public unowned string get_mime_type ();
		public uint get_status_code ();
		public unowned string get_suggested_filename ();
		public unowned string get_uri ();
		public uint64 content_length { get; }
		public string mime_type { get; }
		public uint status_code { get; }
		public string suggested_filename { get; }
		public string uri { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_web_extension_get_type ()")]
	public class WebExtension : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebExtension ();
		public unowned WebKit.WebPage get_page (uint64 page_id);
		public signal void page_created (WebKit.WebPage web_page);
	}
	[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_web_page_get_type ()")]
	public class WebPage : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebPage ();
		public unowned WebKit.DOM.Document get_dom_document ();
		public uint64 get_id ();
		public unowned WebKit.Frame get_main_frame ();
		public unowned string get_uri ();
		public string uri { get; }
		public signal void document_loaded ();
		public signal bool send_request (WebKit.URIRequest request, WebKit.URIResponse redirected_response);
	}
	[CCode (cheader_filename = "webkit2/webkit-web-extension.h", has_target = false)]
	public delegate void WebExtensionInitializeFunction (WebKit.WebExtension extension);
	[CCode (cheader_filename = "webkit2/webkit-web-extension.h", has_target = false)]
	public delegate void WebExtensionInitializeWithUserDataFunction (WebKit.WebExtension extension, GLib.Variant user_data);
}
